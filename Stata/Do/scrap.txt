flowchart row, centername(referred) centertext(Referred)

tokenize "`centertext'", parse("!")
.blockfields=.object.new
.blockfields.Declare array list
forval index=1/`=`.blockfields.list.arrnels'' {
	display `"`.blockfields.list[`index']'"'
}


capture program drop flowchart_writeblock
program define flowchart_writeblock
   gettoken varfirst varothers : 0
   display "  Variables: `anything'"
   display " First Variable: `varfirst'"
   display " Others: " `varothers'
end
flowchart_writeblock row 46 "This is one row of a block." 43 "This is another row of a block" 3 "This is another row of a block"
flowchart_writeblock row, 46 "This is one row of a block.", 43 "This is another row of a block", 3 "This is another row of a block"
flowchart_writeblock row, (46) "This is one row of a block.", (43) "This is another row of a block", (3) "This is another row of a block"
flowchart_writeblock row: (46) "This is one row of a block.", (43) "This is another row of a block", (3) "This is another row of a block"
flowchart_writeblock row : (46) "This is one row of a block.", (43) "This is another row of a block", (3) "This is another row of a block"
flowchart_writeblock row: (46) "This is one row of a block.", (43) "This is another row of a block", (3) "This is another row of a block"
flowchart_writeblock row: (46), "This is one row of a block.", (43), "This is another row of a block", (3), "This is another row of a block"
flowchart_writeblock row: 46, "This is one row of a block.", 43, "This is another row of a block", 3, "This is another row of a block"




capture program drop flowchart_writeblock
program define flowchart_writeblock
   gettoken varfirst varothers : 0
   display "  Variables: `anything'"
   display " First Variable: `varfirst'"
   display " Others: " `varothers'
   display `"0 = `0'"'
   display `"1 = `1'"'
   display `"2 = `2'"'
   display `"3 = `3'"'
   display `"4 = `4'"'
   display `"5 = `5'"'
   display `"6 = `6'"'
   display `"7 = `7'"'
   display `"8 = `8'"'
   display `"9 = `9'"'
   display `"10 = `10'"'
   display `"11 = `11'"'
   display `"12 = `12'"'
   local i = 1
   while "``1''" != "" {
      display ``i''
      local i = `i' + 1
   }
end

flowchart_writeblock row: 46, "This is one row of a block.", 43, "This is another row of a block", 3, "This is another row of a block"
flowchart_writeblock row: 46 "This is one row of a block." 43 "This is another row of a block" 3 "This is another row of a block"
flowchart_writeblock row: 46 "This is one row of a block." 43 "This is another row of a block" 3 "This is another row of a block",  97 "This is one row of a block." 33 "This is another row of a block" 44 "This is another row of a block"


flowchart_writeblock row: 46 "This is one row of a block." 43 "This is another row of a block" 3 "This is another row of a block",  97 "This is one row of a block." 33 "This is another row of a block" 44 "This is another row of a block"

* Format: flowchart_writeblock [row]: [left-block], [right-block]



* With commas in the sentences, a test of tokenization: 
flowchart_writeblock row: 46 "This is one row, of a block." 43 "This is another row, of a block" 3 "This is another row, of a block",  97 "This is one row, of a block." 33 "This is another row, of a block" 44 "This is another row, of a block"









capture program drop flowchart_writeblock
program define flowchart_writeblock
   gettoken varfirst varothers : 0
   display ""
   display " First Variable: `varfirst'"
   display ""
   display "Macro Without Quotes: " `varothers'
   display ""
   display `"Compound Quotes (CQ's):  `varothers'"'
   display ""
   display `"Entire Statement (With CQ's): `0'"'
   display ""

   display `"Tokens:"'
   display ""
   local i = 1
   while "``i''" != "" {
      display "`i': ``i''"
      display ""
      local i = `i' + 1
   }
end

* Without programmatic rownames
flowchart_writeblock row: 46 "This is one row, of a block." 43 "This is another row, of a block" 3 "This is another row, of a block",  97 "This is one row, of a block." 33 "This is another row, of a block" 44 "This is another row, of a block"

* With Programmatic RowNames
flowchart_writeblock row: "lblock_row1" 46 "This is one row, of a block." "lblock_row2" 43 "This is another row, of a block" "lblock_row3" 3 "This is another row, of a block", "rblock_row1" 97 "This is one row, of a block." "rblock_row2" 33 "This is another row, of a block" "rblock_row3" 44 "This is another row, of a block"

* Example of usage with lines broken for clarification:
flowchart_writeblock row: /// 
	* Left Block
	"lblock1_row1" 46 "This is one row, of a block." /// 
	"lblock1_row2" 43 "This is another row, of a block" /// 
	"lblock1_row3" 3 "This is another row, of a block", ///
	* Right Block
	"rblock1_row1" 97 "This is one row, of a block." ///
	"rblock1_row2" 33 "This is another row, of a block" ///
	"rblock1_row3" 44 "This is another row, of a block"

* With rowname specified:
flowchart_writeblock row(row_name): "lblock1_row1" 46 "This is one row, of a block." "lblock1_row2" 43 "This is another row, of a block" "lblock1_row3" 3 "This is another row, of a block", "rblock1_row1" 97 "This is one row, of a block." "rblock1_row2" 33 "This is another row, of a block" "rblock1_row3" 44 "This is another row, of a block"

* Note: A single row = a left block and a right block. A single ',' divides the left block from the right block. Each block consists of a collection of lines. A single line has a description and number (n=#) associated with it. 
* If there is only 1 line, it is centered. If there are more than one line, the first line is the leading line and the others are enumerated and indented.






capture program drop flowchart_writeblock
program define flowchart_writeblock
	syntax [anything] [using/] [, name(string) value(string) input(string) output(string) *]

	* Parse the token for a possible sub-command that contains a command (e.g., flowchart subcommand(parameter): ... )
	gettoken subcmd 0 : 0, parse(" :") quotes
	while `"`subcmd'"' != ":" & `"`subcmd'"' != "" {
		local subcmdwithparam `"`subcmdwithparam' `subcmd'"'
		gettoken subcmd 0 : 0, parse(" :") quotes
	}
	display ""
	display "Subcommand via GetToken: `subcmd'"
	display "Subcommand via Syntax: `1'"
	display `"Subcommand With Parameter: `subcmdwithparam'"'
	display `"Compound Quotes (CQ's):  `0'"'
	local subparam = substr("`subcmdwithparam'", strpos("`subcmdwithparam'", "(")+1, length("`subcmdwithparam'")-strpos("`subcmdwithparam'", "(")-1)
	local subcmdparsed = substr("`subcmdwithparam'", 1, strpos("`subcmdwithparam'", "(")-1)
	display `"Subparameter via String Parse (CQ's):  `subparam'"'
	display `"Subcommand via String Parse (CQ's):  `subcmdparsed'"'
	
	if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
		gettoken varfirst varothers : 0
		display ""
		display " First Variable: `varfirst'"
		display ""
		display "Macro Without Quotes: " `varothers'
		display ""
		display `"Compound Quotes (CQ's):  `varothers'"'
		display ""
		display `"Entire Statement (With CQ's): `0'"'
		display ""

		display `"Tokens:"'
		display ""
		local i = 1
		while "``i''" != "" {
			display "`i': ``i''"
			display ""
			local i = `i' + 1
		}
	}
end

flowchart_writeblock writerow(row_name): "lblock1_line1" 46 "This is one row, \\ of a block." "lblock1_line2" 43 "This is another row, of a block" "lblock1_line3" 3 "This is another row, of a block", "rblock1_line1" 97 "This is one row, of a block." "rblock1_line2" 33 "This is another row, of a block" "rblock1_line3" 44 "This is another row, of a block"


