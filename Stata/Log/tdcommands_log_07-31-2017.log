----------------------------------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Log\tdcommands_log_07-31-2017.log
  log type:  text
 opened on:  31 Jul 2017, 09:12:22

. pwd
C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures 
> the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display `"Subcommand via GetToken: `subcommand'"'
 66.                         }
 67.                         local subcmdsyntax = "`1'"
 68.                         if("$Flowchart_Debug" == "on") {
 69.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 70.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 71.                                 display `"Compound Quotes (CQ's):  `0'"'
 72.                         }
 73.                 }
 74.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand
> .
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithpa
> ram'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 75.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 76.                 if("$Flowchart_Debug" == "on") {
 77.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 78.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 79.                 }
 80.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 81.         
.                         gettoken varfirst varothers : 0
 82.                         if("$Flowchart_Debug" == "on") {
 83.                                 display ""
 84.                                 display " First Variable: `varfirst'"
 85.                                 display ""
 86.                                 display "Macro Without Quotes: " `varothers'
 87.                                 display ""
 88.                                 display `"Compound Quotes (CQ's):  `varothers'"'
 89.                                 display ""
 90.                                 display `"Entire Statement (With CQ's): `0'"'
 91.                                 display ""
 92. 
.                                 display `"Tokens:"'
 93.                                 display ""
 94.                         }
 95.                         
.                         local i = 1             // Token Iterator
 96.                         local blockparse = "center"
 97. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'
 98. 
.                         while "``i''" != "" {
 99.                                 if("$Flowchart_Debug" == "on") {
100.                                         display "`i': ``i''"
101.                                 }
102.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
103.                                         local i = `i' + 1
104.                                         continue
105.                                 }
106.                                 else if(trim("``i''") == ",") {
107.                                         * If a comma is encountered, switch the blockparse flag to parse the left block (lblock) instead 
> of the center block (cblock).
.                                         local blockparse = "left"
108.                                         local i = `i' + 1
109.                                         continue
110.                                 }
111.                                 
.                                 * Generate a Look-Ahead Macro: This allows the conditional if statements determine the end of a block.
.                                 local ilookahead = `i' + 3
112.                                 if("$Flowchart_Debug" == "on") {
113.                                         display `"                      LA: ``ilookahead'' "'
114.                                 }
115.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the 
> start.
.                                 if("`blockparse'" == "center") {
116.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
117.                                 } // fi: End of BlockParse
118.                                 else if("`blockparse'" == "left") {
119.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
120.                                 } // fi: End of BlockParse
121.                                 
.                                 local k = 1     // Line Iterator
122.                                 local stop = ""
123.                                 while("`stop'" == "") { // while: LineWhile
124.                                         if(trim("``i''") == ",") {      // Inept - To Do
125.                                                 local blockparse = "left"
126.                                                 local stop = "stop"
127.                                                 break
128.                                         }
129.                                         local linename = `"``i''"'
130.                                         local i = `i' + 1
131.                                         if("$Flowchart_Debug" == "on") {
132.                                                 display "       iter: `i'"
133.                                                 display "       lnum: ``i''"
134.                                         }
135.                                         local linenum = `"``i''"'
136.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store the number as the named li
> ne's number value.
137.                                         local i = `i' + 1
138.                                         if("$Flowchart_Debug" == "on") {
139.                                                 display "       iter: `i'"
140.                                                 display "       desc: ``i''"
141.                                         }
142.                                         local linedesc = `"``i''"'
143.                                         if("$Flowchart_Debug" == "on") {
144.                                                 display "   Added to Block - Line `k': "
145.                                         }
146.                                         if(`k' == 1) {
147.                                                 if(trim("``ilookahead''") == ",") {
148.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"') singleton
149.                                                 }
150.                                                 else {
151.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"')
152.                                                 }
153.                                         }
154.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" ) {
155.                                                 local ilookaheadx2 = `ilookahead' + 1
156.                                                         if("$Flowchart_Debug" == "on") {
157.                                                                 display "Look Ahead x 1: ``ilookahead''"
158.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
159.                                                         }
160.                                                 if(trim("``ilookahead''") == "") {
161.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end
162.                                                 }
163.                                                 else if(trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") {
164.                                                         if("$Flowchart_Debug" == "on") {
165.                                                                 display "...EndBlank..."
166.                                                         }
167.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end endblank
168.                                                 }
169.                                                 else {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') end
171.                                                 }
172.                                         }
173.                                         else {
174.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
175.                                         }
176.                                         if("$Flowchart_Debug" == "on") {
177.                                                 display " ---- "
178.                                                 display ""
179.                                         }
180.                                         local k = `k' + 1
181.                                         local i = `i' + 1
182.                                         local ilookahead = `ilookahead' + 3
183.                                         if("$Flowchart_Debug" == "on") {
184.                                                 display `"                      LA: ``ilookahead'' "'
185.                                         }
186.                                         if(trim("``i''") == "," | "``i''" == "") {
187.                                                 local blockparse = "left"
188.                                                 local stop = "stop"
189.                                         }
190.                                                 
.                                 } // elihw: End of LineWhile
191.         
. if("$Flowchart_Debug" == "on") {
192.         flowchart_tdwrite_blockfield `"      %  end block for row: `subparam'"' // End of the Row
193. }
194.                                 local i = `i' + 1
195.                         } // elihw: End of TokenWhile
196.                 } // fi: End of Writerow
197.         } // fi: End of SyntaxCmdElse
198. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.         }
  5.         else if("`off'" == "off") {
  6.                 global Flowchart_Debug = "off"
  7.         }
  8.         else {
  9.                 global Flowchart_Debug = "off"
 10.         }
 11. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdo
> c.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis 
> Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" + "      & \\"
 15.                                 }
 16.                                 else {
 17.                                         local suffix = "}; \\"
 18.                                 }
 19.                         }
 20.                         else {
 21.                                 local suffix = "};"
 22.                         }
 23.                 }
 24.                 else {
 25.                         local suffix = "\\"
 26.                 }
 27. 
.                 if("`indent'" != "") {
 28.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 29.                 }
 30.                 else {
 31.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 32.                 }
 33.         }
 34. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 35. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 36. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be
>  within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'f
> lowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misali
> gn and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on

. 
. * Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is
>  another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1
> _line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another
>  line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

 First Variable: lblock1_line1

Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of 
> a block rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is another line, of a
>  block

Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This 
> is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a bloc
> k" "rblock1_line3" 44 "This is another line, of a block"

Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is an
> other line, of a block" "rblock1_line3" 44 "This is another line, of a block"

Tokens:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
1: writerow(rowname):
2: lblock1_line1
                      LA: lblock1_line2 
       iter: 3
       lnum: 46
       iter: 4
       desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
 ---- 

                      LA: lblock1_line3 
       iter: 6
       lnum: 43
       iter: 7
       desc: This is another line, of a block
   Added to Block - Line 2: 
 ---- 

                      LA: , 
       iter: 9
       lnum: 3
       iter: 10
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
 ---- 

                      LA: This is one line, of a block. 
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||
12: rblock1_line1
                      LA: rblock1_line2 
       iter: 13
       lnum: 97
       iter: 14
       desc: This is one line, of a block.
   Added to Block - Line 1: 
 ---- 

                      LA: rblock1_line3 
       iter: 16
       lnum: 33
       iter: 17
       desc: This is another line, of a block
   Added to Block - Line 2: 
 ---- 

                      LA:  
       iter: 19
       lnum: 44
       iter: 20
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
 ---- 

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, o
> f a block" "rblock1_line3" 44 "This is another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a b
> lock" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

 First Variable: flowchart_blank,

Macro Without Quotes: rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is anothe
> r line, of a block

Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_li
> ne3" 44 "This is another line, of a block"

Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, o
> f a block" "rblock1_line3" 44 "This is another line, of a block"

Tokens:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
1: writerow(rowname):
2: flowchart_blank,
                      LA: This is one line, of a block. 
       iter: 3
       lnum: rblock1_line1
       iter: 4
       desc: 97
   Added to Block - Line 1: 
 ---- 

                      LA: This is another line, of a block 
       iter: 6
       lnum: rblock1_line2
       iter: 7
       desc: 33
   Added to Block - Line 2: 
 ---- 

                      LA: This is another line, of a block 
       iter: 9
       lnum: rblock1_line3
       iter: 10
       desc: 44
   Added to Block - Line 3: 
 ---- 

                      LA:  
       iter: 12
       lnum: 
       iter: 13
       desc: 
   Added to Block - Line 4: 
Look Ahead x 1: 
Look Ahead x 2: 
 ---- 

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block", flowchart_blank

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1
> _line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

 First Variable: lblock1_line1

Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of 
> a block flowchart_blank not found
r(111);

end of do-file

r(111);

. help lower

. display "Flowchart_Blank"
Flowchart_Blank

. display lower("Flowchart_Blank")
flowchart_blank

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures 
> the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display `"Subcommand via GetToken: `subcommand'"'
 66.                         }
 67.                         local subcmdsyntax = "`1'"
 68.                         if("$Flowchart_Debug" == "on") {
 69.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 70.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 71.                                 display `"Compound Quotes (CQ's):  `0'"'
 72.                         }
 73.                 }
 74.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand
> .
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithpa
> ram'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 75.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 76.                 if("$Flowchart_Debug" == "on") {
 77.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 78.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 79.                 }
 80.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 81.         
.                         gettoken varfirst varothers : 0
 82.                         if("$Flowchart_Debug" == "on") {
 83.                                 display ""
 84.                                 display " First Variable: `varfirst'"
 85.                                 display ""
 86.                                 display "Macro Without Quotes: " `varothers'
 87.                                 display ""
 88.                                 display `"Compound Quotes (CQ's):  `varothers'"'
 89.                                 display ""
 90.                                 display `"Entire Statement (With CQ's): `0'"'
 91.                                 display ""
 92. 
.                                 display `"Tokens:"'
 93.                                 display ""
 94.                         }
 95.                         
.                         local i = 1             // Token Iterator
 96.                         local blockparse = "center"
 97. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'
 98. 
.                         while "``i''" != "" {
 99.                                 if("$Flowchart_Debug" == "on") {
100.                                         display "`i': ``i''"
101.                                 }
102.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
103.                                         local i = `i' + 1
104.                                         continue
105.                                 }
106.                                 else if(trim("``i''") == ",") {
107.                                         * If a comma is encountered, switch the blockparse flag to parse the left block (lblock) instead 
> of the center block (cblock).
.                                         local blockparse = "left"
108.                                         local i = `i' + 1
109.                                         continue
110.                                 }
111.                                 
.                                 * Generate a Look-Ahead Macro: This allows the conditional if statements determine the end of a block.
.                                 local ilookahead = `i' + 3
112.                                 if("$Flowchart_Debug" == "on") {
113.                                         display `"                      LA: ``ilookahead'' "'
114.                                 }
115.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the 
> start.
.                                 if("`blockparse'" == "center") {
116.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
117.                                 } // fi: End of BlockParse
118.                                 else if("`blockparse'" == "left") {
119.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
120.                                 } // fi: End of BlockParse
121.                                 
.                                 local k = 1     // Line Iterator
122.                                 local stop = ""
123.                                 while("`stop'" == "") { // while: LineWhileLoop
124.                                         if(trim("``i''") == ",") {      // Inept - To Do
125.                                                 local blockparse = "left"
126.                                                 local stop = "stop"
127.                                                 break
128.                                         }
129.                                         local linename = `"``i''"'
130.                                         local i = `i' + 1
131.                                         if("$Flowchart_Debug" == "on") {
132.                                                 display "       iter: `i'"
133.                                                 display "       lnum: ``i''"
134.                                         }
135.                                         local linenum = `"``i''"'
136.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store the number as the named li
> ne's number value.
137.                                         local i = `i' + 1
138.                                         if("$Flowchart_Debug" == "on") {
139.                                                 display "       iter: `i'"
140.                                                 display "       desc: ``i''"
141.                                         }
142.                                         local linedesc = `"``i''"'
143.                                         if("$Flowchart_Debug" == "on") {
144.                                                 display "   Added to Block - Line `k': "
145.                                         }
146.                                         if(`k' == 1) {
147.                                                 if(trim("``ilookahead''") == ",") {
148.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"') singleton
149.                                                 }
150.                                                 else if(lower(trim("``ilookahead''")) == "flowchart_blank") {
151.                                                         if("$Flowchart_Debug" == "on") {
152.                                                                 display "...EndBlank: First Block is Blank..."
153.                                                         }
154.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end endblank
155.                                                 }
156.                                                 else {
157.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"')
158.                                                 }
159.                                         }
160.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" ) {
161.                                                 local ilookaheadx2 = `ilookahead' + 1
162.                                                         if("$Flowchart_Debug" == "on") {
163.                                                                 display "Look Ahead x 1: ``ilookahead''"
164.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
165.                                                         }
166.                                                 if(trim("``ilookahead''") == "") {
167.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end
168.                                                 }
169.                                                 else if((trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``
> ilookahead''")) == "flowchart_blank" ) {
170.                                                         if("$Flowchart_Debug" == "on") {
171.                                                                 display "...EndBlank: Second Block is Blank..."
172.                                                         }
173.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end endblank
174.                                                 }
175.                                                 else {
176.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') end
177.                                                 }
178.                                         }
179.                                         else {
180.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
181.                                         }
182.                                         if("$Flowchart_Debug" == "on") {
183.                                                 display " ---- "
184.                                                 display ""
185.                                         }
186.                                         local k = `k' + 1
187.                                         local i = `i' + 1
188.                                         local ilookahead = `ilookahead' + 3
189.                                         if("$Flowchart_Debug" == "on") {
190.                                                 display `"                      LA: ``ilookahead'' "'
191.                                         }
192.                                         if(trim("``i''") == "," | "``i''" == "") {
193.                                                 local blockparse = "left"
194.                                                 local stop = "stop"
195.                                         }
196.                                                 
.                                 } // elihw: End of LineWhileLoop
197.         
. if("$Flowchart_Debug" == "on") {
198.         flowchart_tdwrite_blockfield `"      %  end block for row: `subparam'"' // End of the Row
199. }
200.                                 local i = `i' + 1
201.                         } // elihw: End of TokenWhile
202.                 } // fi: End of Writerow
203.         } // fi: End of SyntaxCmdElse
204. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.         }
  5.         else if("`off'" == "off") {
  6.                 global Flowchart_Debug = "off"
  7.         }
  8.         else {
  9.                 global Flowchart_Debug = "off"
 10.         }
 11. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdo
> c.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis 
> Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" + "      & \\"
 15.                                 }
 16.                                 else {
 17.                                         local suffix = "}; \\"
 18.                                 }
 19.                         }
 20.                         else {
 21.                                 local suffix = "};"
 22.                         }
 23.                 }
 24.                 else {
 25.                         local suffix = "\\"
 26.                 }
 27. 
.                 if("`indent'" != "") {
 28.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 29.                 }
 30.                 else {
 31.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 32.                 }
 33.         }
 34. if("$Flowchart_Debug" == "on") {
 35.         display `"Blockfield Linestring: `linestring'"'
 36. }
 37. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 38. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 39. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be
>  within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'f
> lowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misali
> gn and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on

. 
. * Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is
>  another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1
> _line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another
>  line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

 First Variable: lblock1_line1

Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of 
> a block rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is another line, of a
>  block

Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This 
> is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a bloc
> k" "rblock1_line3" 44 "This is another line, of a block"

Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is an
> other line, of a block" "rblock1_line3" 44 "This is another line, of a block"

Tokens:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
1: writerow(rowname):
2: lblock1_line1
                      LA: lblock1_line2 
       iter: 3
       lnum: 46
       iter: 4
       desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- 

                      LA: lblock1_line3 
       iter: 6
       lnum: 43
       iter: 7
       desc: This is another line, of a block
   Added to Block - Line 2: 
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- 

                      LA: , 
       iter: 9
       lnum: 3
       iter: 10
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- 

                      LA: This is one line, of a block. 
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||
12: rblock1_line1
                      LA: rblock1_line2 
       iter: 13
       lnum: 97
       iter: 14
       desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- 

                      LA: rblock1_line3 
       iter: 16
       lnum: 33
       iter: 17
       desc: This is another line, of a block
   Added to Block - Line 2: 
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- 

                      LA:  
       iter: 19
       lnum: 44
       iter: 20
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- 

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, o
> f a block" "rblock1_line3" 44 "This is another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a b
> lock" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

 First Variable: flowchart_blank,

Macro Without Quotes: rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is anothe
> r line, of a block

Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_li
> ne3" 44 "This is another line, of a block"

Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, o
> f a block" "rblock1_line3" 44 "This is another line, of a block"

Tokens:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
1: writerow(rowname):
2: flowchart_blank,
                      LA: This is one line, of a block. 
       iter: 3
       lnum: rblock1_line1
       iter: 4
       desc: 97
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { 97 (n=\figvalue{flowchart_blank,}): \\
 ---- 

                      LA: This is another line, of a block 
       iter: 6
       lnum: rblock1_line2
       iter: 7
       desc: 33
   Added to Block - Line 2: 
Blockfield Linestring:         \h 33 (n=\figvalue{This is one line, of a block.}) \\
 ---- 

                      LA: This is another line, of a block 
       iter: 9
       lnum: rblock1_line3
       iter: 10
       desc: 44
   Added to Block - Line 3: 
Blockfield Linestring:         \h 44 (n=\figvalue{This is another line, of a block}) \\
 ---- 

                      LA:  
       iter: 12
       lnum: 
       iter: 13
       desc: 
   Added to Block - Line 4: 
Look Ahead x 1: 
Look Ahead x 2: 
Blockfield Linestring:         \h  (n=\figvalue{This is another line, of a block}) }; \\
 ---- 

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block", flowchart_blank

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1
> _line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

 First Variable: lblock1_line1

Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of 
> a block flowchart_blank not found
r(111);

end of do-file

r(111);

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures 
> the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display `"Subcommand via GetToken: `subcommand'"'
 66.                         }
 67.                         local subcmdsyntax = "`1'"
 68.                         if("$Flowchart_Debug" == "on") {
 69.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 70.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 71.                                 display `"Compound Quotes (CQ's):  `0'"'
 72.                         }
 73.                 }
 74.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand
> .
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithpa
> ram'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 75.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 76.                 if("$Flowchart_Debug" == "on") {
 77.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 78.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 79.                 }
 80.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 81.         
.                         gettoken varfirst varothers : 0
 82.                         if("$Flowchart_Debug" == "on") {
 83.                                 display "ROW CONTENT: "
 84.                                 display ""
 85.                                 display " First Variable: `varfirst'"
 86.                                 display ""
 87.                                 display " Macro Without Quotes: " `varothers'
 88.                                 display ""
 89.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 90.                                 display ""
 91.                                 display `" Entire Statement (With CQ's): `0'"'
 92.                                 display ""
 93. 
.                                 display `"TOKENS:"'
 94.                                 display ""
 95.                         }
 96.                         
.                         local i = 1             // Token Iterator
 97.                         local blockparse = "center"                                             // First Block Default = Center
 98. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (Includes Rowname)
 99. 
.                         while "``i''" != "" {
100.                                 if("$Flowchart_Debug" == "on") {
101.                                         display "`i': ``i''"    // Print Line Number
102.                                 }
103.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
104.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to
>  the next token instead.
105.                                         continue
106.                                 }
107.                                 else if(trim("``i''") == ",") {
108.                                         * If a comma is encountered, switch the blockparse flag to parse the left block (lblock) instead 
> of the center block (cblock).
.                                         local blockparse = "left"
109.                                         local i = `i' + 1
110.                                         continue
111.                                 }
112.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Retu
> rns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
113.                                 if("$Flowchart_Debug" == "on") {
114.                                         display `"                      LA: ``ilookahead'' "'
115.                                 }
116.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the 
> start.
.                                 if("`blockparse'" == "center") {
117.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
118.                                 } // fi: End of BlockParse
119.                                 else if("`blockparse'" == "left") {
120.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
121.                                 } // fi: End of BlockParse
122.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for w block 
> is present (i.e., the Look-Ahead is a , after the lead-line) then the lead line represents a singleton lead-line, which is the only line in 
> the block.
123.                                 local stop = ""
124.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop
> ' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
125.                                         if(trim("``i''") == "," | lower(trim("``i''")) == "flowchart_blank") {  // Inept - To Do
126.                                                 if("$Flowchart_Debug" == "on") {
127.                                                         display " --- "
128.                                                         display " --- Blank First Row --- "
129.                                                         display " ---   Switching to parse the next block."
130.                                                         display " --- "
131.                                                 }
132.                                                 local blockparse = "left"
133.                                                 local stop = "stop"
134.                                                 break
135.                                         }
136.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is 
> also the variable_name.
137.                                                 if("$Flowchart_Debug" == "on") {
138.                                                         display "NEW LINE ---- "
139.                                                         display "       iter: `i'"
140.                                                         display "       desc: ``i''"
141.                                                 }
142.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
143.                                                 if("$Flowchart_Debug" == "on") {
144.                                                         display "       iter: `i'"
145.                                                         display "       lnum: ``i''"
146.                                                 }
147.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number,
>  variable_value, the (n=#).
148.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the li
> ne's name, with the line-name as 
149.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the d
> elimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
150.                                                 if("$Flowchart_Debug" == "on") {
151.                                                         display "       iter: `i'"
152.                                                         display "       desc: ``i''"
153.                                                 }
154.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence
> .
155.                                         if("$Flowchart_Debug" == "on") {
156.                                                 display "   Added to Block - Line `k': "
157.                                         }
158.                                         if(`k' == 1) {
159.                                                 if(trim("``ilookahead''") == ",") {
160.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"') singleton
161.                                                 }
162.                                                 else {
163.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"')
164.                                                 }
165.                                         }
166.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``ilookahead''
> ")) == "flowchart_blank") {
167.                                                 local ilookaheadx2 = `ilookahead' + 1
168.                                                         if("$Flowchart_Debug" == "on") {
169.                                                                 display "Look Ahead x 1: ``ilookahead''"
170.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
171.                                                         }
172.                                                 if(trim("``ilookahead''") == "") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- LA is Blank"
175.                                                         }
176.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end
177.                                                 }
178.                                                 else if((trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``
> ilookahead''")) == "flowchart_blank" ) {
179.                                                         if("$Flowchart_Debug" == "on") {
180.                                                                 display "...EndBlank: Second Block is Blank..."
181.                                                         }
182.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end endblank
183.                                                 }
184.                                                 else {
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') end
186.                                                 }
187.                                         }
188.                                         else {
189.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
190.                                         }
191.                                         if("$Flowchart_Debug" == "on") {
192.                                                 display " ---- END of LINE"
193.                                                 display ""
194.                                         }
195.                                         local k = `k' + 1
196.                                         local i = `i' + 1
197.                                         local ilookahead = `ilookahead' + 3
198.                                         if("$Flowchart_Debug" == "on") {
199.                                                 display `"                      LA: ``ilookahead'' "'
200.                                         }
201.                                         if(trim("``i''") == "," | "``i''" == "") {
202.                                                 local blockparse = "left"
203.                                                 local stop = "stop"
204.                                         }
205.                                                 
.                                 } // elihw: End of LineWhileLoop
206.         
. if("$Flowchart_Debug" == "on") {
207.         flowchart_tdwrite_blockfield `"      %  end block for row: `subparam'"' // End of the Row
208. }
209.                                 local i = `i' + 1
210.                         } // elihw: End of TokenWhile
211.                 } // fi: End of Writerow
212.         } // fi: End of SyntaxCmdElse
213. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.         }
  5.         else if("`off'" == "off") {
  6.                 global Flowchart_Debug = "off"
  7.         }
  8.         else {
  9.                 global Flowchart_Debug = "off"
 10.         }
 11. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdo
> c.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis 
> Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" + "      & \\"
 15.                                 }
 16.                                 else {
 17.                                         local suffix = "}; \\"
 18.                                 }
 19.                         }
 20.                         else {
 21.                                 local suffix = "};"
 22.                         }
 23.                 }
 24.                 else {
 25.                         local suffix = "\\"
 26.                 }
 27. 
.                 if("`indent'" != "") {
 28.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 29.                 }
 30.                 else {
 31.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 32.                 }
 33.         }
 34. if("$Flowchart_Debug" == "on") {
 35.         display `"Blockfield Linestring: `linestring'"'
 36. }
 37. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 38. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 39. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be
>  within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'f
> lowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misali
> gn and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on

. 
. * Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is
>  another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1
> _line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another
>  line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: lblock1_line1

 Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of
>  a block rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is another line, of 
> a block

 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This
>  is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a blo
> ck" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "l
> block1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is a
> nother line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
1: writerow(rowname):
2: lblock1_line1
                      LA: lblock1_line2 
NEW LINE ---- 
       iter: 2
       desc: lblock1_line1
       iter: 3
       lnum: 46
       iter: 4
       desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END of LINE

                      LA: lblock1_line3 
NEW LINE ---- 
       iter: 5
       desc: lblock1_line2
       iter: 6
       lnum: 43
       iter: 7
       desc: This is another line, of a block
   Added to Block - Line 2: 
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END of LINE

                      LA: , 
NEW LINE ---- 
       iter: 8
       desc: lblock1_line3
       iter: 9
       lnum: 3
       iter: 10
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END of LINE

                      LA: This is one line, of a block. 
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||
12: rblock1_line1
                      LA: rblock1_line2 
NEW LINE ---- 
       iter: 12
       desc: rblock1_line1
       iter: 13
       lnum: 97
       iter: 14
       desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END of LINE

                      LA: rblock1_line3 
NEW LINE ---- 
       iter: 15
       desc: rblock1_line2
       iter: 16
       lnum: 33
       iter: 17
       desc: This is another line, of a block
   Added to Block - Line 2: 
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END of LINE

                      LA:  
NEW LINE ---- 
       iter: 18
       desc: rblock1_line3
       iter: 19
       lnum: 44
       iter: 20
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- LA is Blank
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END of LINE

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, o
> f a block" "rblock1_line3" 44 "This is another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a b
> lock" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: flowchart_blank,

 Macro Without Quotes: rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is anoth
> er line, of a block

 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_l
> ine3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, 
> of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
1: writerow(rowname):
2: flowchart_blank,
                      LA: This is one line, of a block. 
NEW LINE ---- 
       iter: 2
       desc: flowchart_blank,
       iter: 3
       lnum: rblock1_line1
       iter: 4
       desc: 97
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { 97 (n=\figvalue{flowchart_blank,}): \\
 ---- END of LINE

                      LA: This is another line, of a block 
NEW LINE ---- 
       iter: 5
       desc: This is one line, of a block.
       iter: 6
       lnum: rblock1_line2
       iter: 7
       desc: 33
   Added to Block - Line 2: 
Blockfield Linestring:         \h 33 (n=\figvalue{This is one line, of a block.}) \\
 ---- END of LINE

                      LA: This is another line, of a block 
NEW LINE ---- 
       iter: 8
       desc: This is another line, of a block
       iter: 9
       lnum: rblock1_line3
       iter: 10
       desc: 44
   Added to Block - Line 3: 
Blockfield Linestring:         \h 44 (n=\figvalue{This is another line, of a block}) \\
 ---- END of LINE

                      LA:  
NEW LINE ---- 
       iter: 11
       desc: This is another line, of a block
       iter: 12
       lnum: 
       iter: 13
       desc: 
   Added to Block - Line 4: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- LA is Blank
Blockfield Linestring:         \h  (n=\figvalue{This is another line, of a block}) }; \\
 ---- END of LINE

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block", flowchart_blank

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1
> _line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: lblock1_line1

 Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of
>  a block flowchart_blank not found
r(111);

end of do-file

r(111);

. 
. 
. 
. 
. 
. 
. 
. 
. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures 
> the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display `"Subcommand via GetToken: `subcommand'"'
 66.                         }
 67.                         local subcmdsyntax = "`1'"
 68.                         if("$Flowchart_Debug" == "on") {
 69.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 70.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 71.                                 display `"Compound Quotes (CQ's):  `0'"'
 72.                         }
 73.                 }
 74.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand
> .
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithpa
> ram'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 75.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 76.                 if("$Flowchart_Debug" == "on") {
 77.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 78.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 79.                 }
 80.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 81.         
.                         gettoken varfirst varothers : 0
 82.                         if("$Flowchart_Debug" == "on") {
 83.                                 display "ROW CONTENT: "
 84.                                 display ""
 85.                                 display " First Variable: `varfirst'"
 86.                                 display ""
 87.                                 display " Macro Without Quotes: " `varothers'
 88.                                 display ""
 89.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 90.                                 display ""
 91.                                 display `" Entire Statement (With CQ's): `0'"'
 92.                                 display ""
 93. 
.                                 display `"TOKENS:"'
 94.                                 display ""
 95.                         }
 96.                         
.                         local i = 1             // Token Iterator
 97.                         local blockparse = "center"                                             // First Block Default = Center
 98. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
 99. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subpar
> am):' call
100.                                 if("$Flowchart_Debug" == "on") {
101.                                         display "NEW BLOCK ----         [blockparse: `blockparse']"
102.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Tok
> en
103.                                 }
104.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
105.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to
>  the next token instead.
106.                                         continue
107.                                 }
108.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flo
> wchart_blank,") & "`blockparse'" == "center") ) {
109.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), swi
> tch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
110.                                         local i = `i' + 1       // Move to the next token after the loop continues.
111.                                         continue
112.                                 }
113.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Retu
> rns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
114.                                 if("$Flowchart_Debug" == "on") {
115.                                         display `"          [blockparse: `blockparse']"'
116.                                         display `"                      LA: ``ilookahead'' "'
117.                                 }
118.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the 
> start.
.                                 if("`blockparse'" == "center") {
119.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
120.                                 } // fi: End of BlockParse
121.                                 else if("`blockparse'" == "left") {
122.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
123.                                 } // fi: End of BlockParse
124.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the bloc
> k is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-line, which is the only line
>  in the block.
125.                                 local stop = ""
126.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop
> ' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
127.                                         if("$Flowchart_Debug" == "on") {
128.                                                 display " ---- NEW LINE"
129.                                         }
130.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "
> flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
131.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the bl
> ock is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce a blank line '& \\' charac
> ter.)
.                                                 if("$Flowchart_Debug" == "on") {
132.                                                         display " --- "
133.                                                         display " --- Blank First Row --- "
134.                                                         display " ---   Switching to parse the next block."
135.                                                         display " --- "
136.                                                 }
137.                                                 local blockparse = "left"
138.                                                 local stop = "stop"
139.                                                 break
140.                                         }
141.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
142.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k
> : `k']"
143.                                         }
144.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is 
> also the variable_name.
145.                                                 if("$Flowchart_Debug" == "on") {
146.                                                         display "       iter: `i'"
147.                                                         display "       desc: ``i''"
148.                                                 }
149.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
150.                                                 if("$Flowchart_Debug" == "on") {
151.                                                         display "       iter: `i'"
152.                                                         display "       lnum: ``i''"
153.                                                 }
154.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number,
>  variable_value, the (n=#).
155.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the li
> ne's name, with the line-name as 
156.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the d
> elimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
157.                                                 if("$Flowchart_Debug" == "on") {
158.                                                         display "       iter: `i'"
159.                                                         display "       desc: ``i''"
160.                                                 }
161.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence
> .
162.                                         if("$Flowchart_Debug" == "on") {
163.                                                 display "   Added to Block - Line `k': "
164.                                         }
165.                                         if(`k' == 1) {
166.                                                 if(trim("``ilookahead''") == ",") {
167.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"') singleton
168.                                                 }
169.                                                 else {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"')
171.                                                 }
172.                                         }
173.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "f
> lowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
174.                                                 local ilookaheadx2 = `ilookahead' + 1
175.                                                         if("$Flowchart_Debug" == "on") {
176.                                                                 display "Look Ahead x 1: ``ilookahead''"
177.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
178.                                                         }
179.                                                 if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - 
> [content] [newrow] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end
185.                                                 }
186.                                                 else if((trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``
> ilookahead''")) == "flowchart_blank" ) {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline 
> - [content] [newrow] [end] [endblank]"
189.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end endblank
192.                                                 }
193.                                                 else {
194.                                                         if("$Flowchart_Debug" == "on") {
195.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
196.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
197.                                                         }
198.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') end
199.                                                 }
200.                                         }
201.                                         else {
202.                                                         if("$Flowchart_Debug" == "on") {
203.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
204.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
205.                                                         }
206.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
207.                                         }
208.                                         if("$Flowchart_Debug" == "on") {
209.                                                 display " ---- END OF LINE"
210.                                                 display ""
211.                                         }
212.                                         local k = `k' + 1
213.                                         local i = `i' + 1
214.                                         local ilookahead = `ilookahead' + 3
215.                                         if("$Flowchart_Debug" == "on") {
216.                                                 display `"                      LA: ``ilookahead'' "'
217.                                         }
218.                                         if(trim("``i''") == "," | "``i''" == "") {
219.                                                 local blockparse = "left"
220.                                                 local stop = "stop"
221.                                         }
222.                                                 
.                                 } // elihw: End of LineWhileLoop
223.         
. if("$Flowchart_Debug" == "on") {
224.         flowchart_tdwrite_blockfield `"      %  end block for row: `subparam'"' // End of the Row
225. }
226.                                 local i = `i' + 1
227.                         } // elihw: End of TokenWhile
228.                 } // fi: End of Writerow
229.         } // fi: End of SyntaxCmdElse
230. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.         }
  5.         else if("`off'" == "off") {
  6.                 global Flowchart_Debug = "off"
  7.         }
  8.         else {
  9.                 global Flowchart_Debug = "off"
 10.         }
 11. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdo
> c.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis 
> Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" + "      & \\"
 15.                                 }
 16.                                 else {
 17.                                         local suffix = "}; \\"
 18.                                 }
 19.                         }
 20.                         else {
 21.                                 local suffix = "};"
 22.                         }
 23.                 }
 24.                 else {
 25.                         local suffix = "\\"
 26.                 }
 27. 
.                 if("`indent'" != "") {
 28.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 29.                 }
 30.                 else {
 31.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 32.                 }
 33.         }
 34. if("$Flowchart_Debug" == "on") {
 35.         display `"Blockfield Linestring: `linestring'"'
 36. }
 37. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 38. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 39. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be
>  within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'f
> lowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misali
> gn and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on

. 
. * TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is
>  another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1
> _line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another
>  line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: lblock1_line1

 Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of
>  a block rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is another line, of 
> a block

 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This
>  is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a blo
> ck" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "l
> block1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is a
> nother line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
NEW BLOCK ----         [blockparse: center]
1: writerow(rowname):
NEW BLOCK ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       iter: 2
       desc: lblock1_line1
       iter: 3
       lnum: 46
       iter: 4
       desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       iter: 5
       desc: lblock1_line2
       iter: 6
       lnum: 43
       iter: 7
       desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       iter: 8
       desc: lblock1_line3
       iter: 9
       lnum: 3
       iter: 10
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||
NEW BLOCK ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       iter: 12
       desc: rblock1_line1
       iter: 13
       lnum: 97
       iter: 14
       desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       iter: 15
       desc: rblock1_line2
       iter: 16
       lnum: 33
       iter: 17
       desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       iter: 18
       desc: rblock1_line3
       iter: 19
       lnum: 44
       iter: 20
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, o
> f a block" "rblock1_line3" 44 "This is another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a b
> lock" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: flowchart_blank,

 Macro Without Quotes: rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is anoth
> er line, of a block

 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_l
> ine3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, 
> of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
NEW BLOCK ----         [blockparse: center]
1: writerow(rowname):
NEW BLOCK ----         [blockparse: center]
2: flowchart_blank,
NEW BLOCK ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       iter: 3
       desc: rblock1_line1
       iter: 4
       lnum: 97
       iter: 5
       desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       iter: 6
       desc: rblock1_line2
       iter: 7
       lnum: 33
       iter: 8
       desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       iter: 9
       desc: rblock1_line3
       iter: 10
       lnum: 44
       iter: 11
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lb
> lock1_line3" 3 "This is another line, of a block", flowchart_blank

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1
> _line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: lblock1_line1

 Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of
>  a block flowchart_blank not found
r(111);

end of do-file

r(111);

. help subinstr

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures 
> the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display `"Subcommand via GetToken: `subcommand'"'
 66.                         }
 67.                         local subcmdsyntax = "`1'"
 68.                         if("$Flowchart_Debug" == "on") {
 69.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 70.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 71.                                 display `"Compound Quotes (CQ's):  `0'"'
 72.                         }
 73.                 }
 74.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand
> .
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithpa
> ram'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 75.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 76.                 if("$Flowchart_Debug" == "on") {
 77.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 78.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 79.                 }
 80.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 81.         
.                         gettoken varfirst varothers : 0
 82.                         if("$Flowchart_Debug" == "on") {
 83.                                 display "ROW CONTENT: "
 84.                                 display ""
 85.                                 display " First Variable: `varfirst'"
 86.                                 display ""
 87.                                 display " Macro Without Quotes: " `varothers'
 88.                                 display ""
 89.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 90.                                 display ""
 91.                                 display `" Entire Statement (With CQ's): `0'"'
 92.                                 display ""
 93. 
.                                 display `"TOKENS:"'
 94.                                 display ""
 95.                         }
 96.                         
.                         local i = 1             // Token Iterator
 97.                         local blockparse = "center"                                             // First Block Default = Center
 98. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
 99. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subpar
> am):' call
100.                                 if("$Flowchart_Debug" == "on") {
101.                                         display "NEW BLOCK ----         [blockparse: `blockparse']"
102.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Tok
> en
103.                                 }
104.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
105.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to
>  the next token instead.
106.                                         continue
107.                                 }
108.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flo
> wchart_blank,") & "`blockparse'" == "center") ) {
109.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), swi
> tch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
110.                                         local i = `i' + 1       // Move to the next token after the loop continues.
111.                                         continue
112.                                 }
113.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Retu
> rns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
114.                                 if("$Flowchart_Debug" == "on") {
115.                                         display `"          [blockparse: `blockparse']"'
116.                                         display `"                      LA: ``ilookahead'' "'
117.                                 }
118.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the 
> start.
.                                 if("`blockparse'" == "center") {
119.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
120.                                 } // fi: End of BlockParse
121.                                 else if("`blockparse'" == "left") {
122.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
123.                                 } // fi: End of BlockParse
124.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the bloc
> k is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-line, which is the only line
>  in the block.
125.                                 local stop = ""
126.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop
> ' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
127.                                         if("$Flowchart_Debug" == "on") {
128.                                                 display " ---- NEW LINE"
129.                                         }
130.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "
> flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
131.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the bl
> ock is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce a blank line '& \\' charac
> ter.)
.                                                 if("$Flowchart_Debug" == "on") {
132.                                                         display " --- "
133.                                                         display " --- Blank First Row --- "
134.                                                         display " ---   Switching to parse the next block."
135.                                                         display " --- "
136.                                                 }
137.                                                 local blockparse = "left"
138.                                                 local stop = "stop"
139.                                                 break
140.                                         }
141.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
142.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k
> : `k']"
143.                                         }
144.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is 
> also the variable_name.
145.                                                 if("$Flowchart_Debug" == "on") {
146.                                                         display "       iter: `i'"
147.                                                         display "       desc: ``i''"
148.                                                 }
149.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
150.                                                 if("$Flowchart_Debug" == "on") {
151.                                                         display "       iter: `i'"
152.                                                         display "       lnum: ``i''"
153.                                                 }
154.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number,
>  variable_value, the (n=#).
155.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the li
> ne's name, with the line-name as 
156.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the d
> elimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
157.                                                 if("$Flowchart_Debug" == "on") {
158.                                                         display "       iter: `i'"
159.                                                         display "       desc: ``i''"
160.                                                 }
161.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence
> .
162.                                         if("$Flowchart_Debug" == "on") {
163.                                                 display "   Added to Block - Line `k': "
164.                                         }
165.                                         if(`k' == 1) {
166.                                                 if(trim("``ilookahead''") == ",") {
167.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"') singleton
168.                                                 }
169.                                                 else {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"')
171.                                                 }
172.                                         }
173.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "f
> lowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
174.                                                 local ilookaheadx2 = `ilookahead' + 1
175.                                                         if("$Flowchart_Debug" == "on") {
176.                                                                 display "Look Ahead x 1: ``ilookahead''"
177.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
178.                                                         }
179.                                                 if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - 
> [content] [newrow] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end
185.                                                 }
186.                                                 else if((trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``
> ilookahead''")) == "flowchart_blank" ) {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline 
> - [content] [newrow] [end] [endblank]"
189.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end endblank
192.                                                 }
193.                                                 else {
194.                                                         if("$Flowchart_Debug" == "on") {
195.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
196.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
197.                                                         }
198.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') end
199.                                                 }
200.                                         }
201.                                         else {
202.                                                         if("$Flowchart_Debug" == "on") {
203.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
204.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
205.                                                         }
206.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
207.                                         }
208.                                         if("$Flowchart_Debug" == "on") {
209.                                                 display " ---- END OF LINE"
210.                                                 display ""
211.                                         }
212.                                         local k = `k' + 1
213.                                         local i = `i' + 1
214.                                         local ilookahead = `ilookahead' + 3
215.                                         if("$Flowchart_Debug" == "on") {
216.                                                 display `"                      LA: ``ilookahead'' "'
217.                                         }
218.                                         if(trim("``i''") == "," | "``i''" == "") {
219.                                                 local blockparse = "left"
220.                                                 local stop = "stop"
221.                                         }
222.                                                 
.                                 } // elihw: End of LineWhileLoop
223.         
. if("$Flowchart_Debug" == "on") {
224.         flowchart_tdwrite_blockfield `"      %  end block for row: `subparam'"' // End of the Row
225. }
226.                                 local i = `i' + 1
227.                         } // elihw: End of TokenWhile
228.                 } // fi: End of Writerow
229.         } // fi: End of SyntaxCmdElse
230. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":" "", .)
  5.                 local logid = subinstr("`logid'", " " "", .)
  6.                 log using "DebubLog`logid'.log", replace text
  7.         }
  8.         else if("`off'" == "off") {
  9.                 global Flowchart_Debug = "off"
 10.         }
 11.         else {
 12.                 global Flowchart_Debug = "off"
 13.         }
 14. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdo
> c.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis 
> Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" + "      & \\"
 15.                                 }
 16.                                 else {
 17.                                         local suffix = "}; \\"
 18.                                 }
 19.                         }
 20.                         else {
 21.                                 local suffix = "};"
 22.                         }
 23.                 }
 24.                 else {
 25.                         local suffix = "\\"
 26.                 }
 27. 
.                 if("`indent'" != "") {
 28.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 29.                 }
 30.                 else {
 31.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 32.                 }
 33.         }
 34. if("$Flowchart_Debug" == "on") {
 35.         display `"Blockfield Linestring: `linestring'"'
 36. }
 37. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 38. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 39. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be
>  within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'f
> lowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misali
> gn and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
invalid syntax
r(198);

end of do-file

r(198);

. set more off

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures 
> the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display `"Subcommand via GetToken: `subcommand'"'
 66.                         }
 67.                         local subcmdsyntax = "`1'"
 68.                         if("$Flowchart_Debug" == "on") {
 69.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 70.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 71.                                 display `"Compound Quotes (CQ's):  `0'"'
 72.                         }
 73.                 }
 74.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand
> .
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithpa
> ram'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 75.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 76.                 if("$Flowchart_Debug" == "on") {
 77.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 78.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 79.                 }
 80.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 81.         
.                         gettoken varfirst varothers : 0
 82.                         if("$Flowchart_Debug" == "on") {
 83.                                 display "ROW CONTENT: "
 84.                                 display ""
 85.                                 display " First Variable: `varfirst'"
 86.                                 display ""
 87.                                 display " Macro Without Quotes: " `varothers'
 88.                                 display ""
 89.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 90.                                 display ""
 91.                                 display `" Entire Statement (With CQ's): `0'"'
 92.                                 display ""
 93. 
.                                 display `"TOKENS:"'
 94.                                 display ""
 95.                         }
 96.                         
.                         local i = 1             // Token Iterator
 97.                         local blockparse = "center"                                             // First Block Default = Center
 98. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
 99. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subpar
> am):' call
100.                                 if("$Flowchart_Debug" == "on") {
101.                                         display "NEW BLOCK ----         [blockparse: `blockparse']"
102.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Tok
> en
103.                                 }
104.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
105.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to
>  the next token instead.
106.                                         continue
107.                                 }
108.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flo
> wchart_blank,") & "`blockparse'" == "center") ) {
109.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), swi
> tch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
110.                                         local i = `i' + 1       // Move to the next token after the loop continues.
111.                                         continue
112.                                 }
113.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Retu
> rns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
114.                                 if("$Flowchart_Debug" == "on") {
115.                                         display `"          [blockparse: `blockparse']"'
116.                                         display `"                      LA: ``ilookahead'' "'
117.                                 }
118.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the 
> start.
.                                 if("`blockparse'" == "center") {
119.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
120.                                 } // fi: End of BlockParse
121.                                 else if("`blockparse'" == "left") {
122.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
123.                                 } // fi: End of BlockParse
124.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the bloc
> k is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-line, which is the only line
>  in the block.
125.                                 local stop = ""
126.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop
> ' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
127.                                         if("$Flowchart_Debug" == "on") {
128.                                                 display " ---- NEW LINE"
129.                                         }
130.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "
> flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
131.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the bl
> ock is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce a blank line '& \\' charac
> ter.)
.                                                 if("$Flowchart_Debug" == "on") {
132.                                                         display " --- "
133.                                                         display " --- Blank First Row --- "
134.                                                         display " ---   Switching to parse the next block."
135.                                                         display " --- "
136.                                                 }
137.                                                 local blockparse = "left"
138.                                                 local stop = "stop"
139.                                                 break
140.                                         }
141.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
142.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k
> : `k']"
143.                                         }
144.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is 
> also the variable_name.
145.                                                 if("$Flowchart_Debug" == "on") {
146.                                                         display "       iter: `i'"
147.                                                         display "       desc: ``i''"
148.                                                 }
149.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
150.                                                 if("$Flowchart_Debug" == "on") {
151.                                                         display "       iter: `i'"
152.                                                         display "       lnum: ``i''"
153.                                                 }
154.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number,
>  variable_value, the (n=#).
155.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the li
> ne's name, with the line-name as 
156.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the d
> elimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
157.                                                 if("$Flowchart_Debug" == "on") {
158.                                                         display "       iter: `i'"
159.                                                         display "       desc: ``i''"
160.                                                 }
161.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence
> .
162.                                         if("$Flowchart_Debug" == "on") {
163.                                                 display "   Added to Block - Line `k': "
164.                                         }
165.                                         if(`k' == 1) {
166.                                                 if(trim("``ilookahead''") == ",") {
167.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"') singleton
168.                                                 }
169.                                                 else {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"')
171.                                                 }
172.                                         }
173.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "f
> lowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
174.                                                 local ilookaheadx2 = `ilookahead' + 1
175.                                                         if("$Flowchart_Debug" == "on") {
176.                                                                 display "Look Ahead x 1: ``ilookahead''"
177.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
178.                                                         }
179.                                                 if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - 
> [content] [newrow] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end
185.                                                 }
186.                                                 else if((trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``
> ilookahead''")) == "flowchart_blank" ) {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline 
> - [content] [newrow] [end] [endblank]"
189.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end endblank
192.                                                 }
193.                                                 else {
194.                                                         if("$Flowchart_Debug" == "on") {
195.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
196.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
197.                                                         }
198.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') end
199.                                                 }
200.                                         }
201.                                         else {
202.                                                         if("$Flowchart_Debug" == "on") {
203.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
204.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
205.                                                         }
206.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
207.                                         }
208.                                         if("$Flowchart_Debug" == "on") {
209.                                                 display " ---- END OF LINE"
210.                                                 display ""
211.                                         }
212.                                         local k = `k' + 1
213.                                         local i = `i' + 1
214.                                         local ilookahead = `ilookahead' + 3
215.                                         if("$Flowchart_Debug" == "on") {
216.                                                 display `"                      LA: ``ilookahead'' "'
217.                                         }
218.                                         if(trim("``i''") == "," | "``i''" == "") {
219.                                                 local blockparse = "left"
220.                                                 local stop = "stop"
221.                                         }
222.                                                 
.                                 } // elihw: End of LineWhileLoop
223.         
. if("$Flowchart_Debug" == "on") {
224.         flowchart_tdwrite_blockfield `"      %  end block for row: `subparam'"' // End of the Row
225. }
226.                                 local i = `i' + 1
227.                         } // elihw: End of TokenWhile
228.                 } // fi: End of Writerow
229.         } // fi: End of SyntaxCmdElse
230. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  5.                 local logid = subinstr("`logid'", " ", "", .)
  6.                 log using "DebubLog`logid'.log", replace text
  7.         }
  8.         else if("`off'" == "off") {
  9.                 global Flowchart_Debug = "off"
 10.         }
 11.         else {
 12.                 global Flowchart_Debug = "off"
 13.         }
 14. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdo
> c.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis 
> Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" + "      & \\"
 15.                                 }
 16.                                 else {
 17.                                         local suffix = "}; \\"
 18.                                 }
 19.                         }
 20.                         else {
 21.                                 local suffix = "};"
 22.                         }
 23.                 }
 24.                 else {
 25.                         local suffix = "\\"
 26.                 }
 27. 
.                 if("`indent'" != "") {
 28.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 29.                 }
 30.                 else {
 31.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 32.                 }
 33.         }
 34. if("$Flowchart_Debug" == "on") {
 35.         display `"Blockfield Linestring: `linestring'"'
 36. }
 37. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 38. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 39. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be
>  within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'f
> lowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misali
> gn and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
log file already open
r(604);

end of do-file

r(604);

. help log

. log query _all
      name:  <unnamed>
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Log\tdcommands_log_07-31-2017.log, on
  log type:  text

. log query
      name:  <unnamed>
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Log\tdcommands_log_07-31-2017.log, on
  log type:  text

. log using "DebugLog.log", name(DebugLog) replace text
(note: file C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log not found)
----------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 11:24:04

. log query DebugLog
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log, on
  log type:  text

. display "`r(status)"
`r(status)

. display "`r(status)'"
on

. log off DebugLog
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 paused on:  31 Jul 2017, 11:24:45
----------------------------------------------------------------------------------------------------------------------------------------------

. log query DebugLog
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log, off
  log type:  text

. display "`r(status)'"
off

. log query DebugLog2
log DebugLog2 not found
r(111);

. display "`r(status)'"


. capture log DebugLog close

. display "`r(status)'"


. log query DebugLog
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log, off
  log type:  text

. display "`r(status)'"
off

. capture log query DebugLog3

. display "`r(status)'"


. do "C:\Users\Krist\AppData\Local\Temp\STD02000000.tmp"

.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace 
> the log.
. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures 
> the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display `"Subcommand via GetToken: `subcommand'"'
 66.                         }
 67.                         local subcmdsyntax = "`1'"
 68.                         if("$Flowchart_Debug" == "on") {
 69.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 70.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 71.                                 display `"Compound Quotes (CQ's):  `0'"'
 72.                         }
 73.                 }
 74.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand
> .
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithpa
> ram'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 75.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 76.                 if("$Flowchart_Debug" == "on") {
 77.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 78.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 79.                 }
 80.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 81.         
.                         gettoken varfirst varothers : 0
 82.                         if("$Flowchart_Debug" == "on") {
 83.                                 display "ROW CONTENT: "
 84.                                 display ""
 85.                                 display " First Variable: `varfirst'"
 86.                                 display ""
 87.                                 display " Macro Without Quotes: " `varothers'
 88.                                 display ""
 89.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 90.                                 display ""
 91.                                 display `" Entire Statement (With CQ's): `0'"'
 92.                                 display ""
 93. 
.                                 display `"TOKENS:"'
 94.                                 display ""
 95.                         }
 96.                         
.                         local i = 1             // Token Iterator
 97.                         local blockparse = "center"                                             // First Block Default = Center
 98. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
 99. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subpar
> am):' call
100.                                 if("$Flowchart_Debug" == "on") {
101.                                         display "NEW BLOCK ----         [blockparse: `blockparse']"
102.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Tok
> en
103.                                 }
104.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
105.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to
>  the next token instead.
106.                                         continue
107.                                 }
108.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flo
> wchart_blank,") & "`blockparse'" == "center") ) {
109.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), swi
> tch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
110.                                         local i = `i' + 1       // Move to the next token after the loop continues.
111.                                         continue
112.                                 }
113.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Retu
> rns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
114.                                 if("$Flowchart_Debug" == "on") {
115.                                         display `"          [blockparse: `blockparse']"'
116.                                         display `"                      LA: ``ilookahead'' "'
117.                                 }
118.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the 
> start.
.                                 if("`blockparse'" == "center") {
119.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
120.                                 } // fi: End of BlockParse
121.                                 else if("`blockparse'" == "left") {
122.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
123.                                 } // fi: End of BlockParse
124.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the bloc
> k is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-line, which is the only line
>  in the block.
125.                                 local stop = ""
126.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop
> ' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
127.                                         if("$Flowchart_Debug" == "on") {
128.                                                 display " ---- NEW LINE"
129.                                         }
130.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "
> flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
131.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the bl
> ock is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce a blank line '& \\' charac
> ter.)
.                                                 if("$Flowchart_Debug" == "on") {
132.                                                         display " --- "
133.                                                         display " --- Blank First Row --- "
134.                                                         display " ---   Switching to parse the next block."
135.                                                         display " --- "
136.                                                 }
137.                                                 local blockparse = "left"
138.                                                 local stop = "stop"
139.                                                 break
140.                                         }
141.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
142.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k
> : `k']"
143.                                         }
144.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is 
> also the variable_name.
145.                                                 if("$Flowchart_Debug" == "on") {
146.                                                         display "       iter: `i'"
147.                                                         display "       desc: ``i''"
148.                                                 }
149.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
150.                                                 if("$Flowchart_Debug" == "on") {
151.                                                         display "       iter: `i'"
152.                                                         display "       lnum: ``i''"
153.                                                 }
154.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number,
>  variable_value, the (n=#).
155.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the li
> ne's name, with the line-name as 
156.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the d
> elimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
157.                                                 if("$Flowchart_Debug" == "on") {
158.                                                         display "       iter: `i'"
159.                                                         display "       desc: ``i''"
160.                                                 }
161.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence
> .
162.                                         if("$Flowchart_Debug" == "on") {
163.                                                 display "   Added to Block - Line `k': "
164.                                         }
165.                                         if(`k' == 1) {
166.                                                 if(trim("``ilookahead''") == ",") {
167.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"') singleton
168.                                                 }
169.                                                 else {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"')
171.                                                 }
172.                                         }
173.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "f
> lowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
174.                                                 local ilookaheadx2 = `ilookahead' + 1
175.                                                         if("$Flowchart_Debug" == "on") {
176.                                                                 display "Look Ahead x 1: ``ilookahead''"
177.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
178.                                                         }
179.                                                 if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - 
> [content] [newrow] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end
185.                                                 }
186.                                                 else if((trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``
> ilookahead''")) == "flowchart_blank" ) {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline 
> - [content] [newrow] [end] [endblank]"
189.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end endblank
192.                                                 }
193.                                                 else {
194.                                                         if("$Flowchart_Debug" == "on") {
195.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
196.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
197.                                                         }
198.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') end
199.                                                 }
200.                                         }
201.                                         else {
202.                                                         if("$Flowchart_Debug" == "on") {
203.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
204.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
205.                                                         }
206.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
207.                                         }
208.                                         if("$Flowchart_Debug" == "on") {
209.                                                 display " ---- END OF LINE"
210.                                                 display ""
211.                                         }
212.                                         local k = `k' + 1
213.                                         local i = `i' + 1
214.                                         local ilookahead = `ilookahead' + 3
215.                                         if("$Flowchart_Debug" == "on") {
216.                                                 display `"                      LA: ``ilookahead'' "'
217.                                         }
218.                                         if(trim("``i''") == "," | "``i''" == "") {
219.                                                 local blockparse = "left"
220.                                                 local stop = "stop"
221.                                         }
222.                                                 
.                                 } // elihw: End of LineWhileLoop
223.         
. if("$Flowchart_Debug" == "on") {
224.         flowchart_tdwrite_blockfield `"      %  end block for row: `subparam'"' // End of the Row
225. }
226.                                 local i = `i' + 1
227.                         } // elihw: End of TokenWhile
228.                 } // fi: End of Writerow
229.         } // fi: End of SyntaxCmdElse
230. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned o
> ff), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace 
> the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text                    
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdo
> c.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis 
> Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" + "      & \\"
 15.                                 }
 16.                                 else {
 17.                                         local suffix = "}; \\"
 18.                                 }
 19.                         }
 20.                         else {
 21.                                 local suffix = "};"
 22.                         }
 23.                 }
 24.                 else {
 25.                         local suffix = "\\"
 26.                 }
 27. 
.                 if("`indent'" != "") {
 28.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 29.                 }
 30.                 else {
 31.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 32.                 }
 33.         }
 34. if("$Flowchart_Debug" == "on") {
 35.         display `"Blockfield Linestring: `linestring'"'
 36. }
 37. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 38. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 39. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be
>  within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'f
> lowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misali
> gn and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_113256
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 11:32:56

. 
. * TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: lblock1_line1

 Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of a block rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line3
> 44This is another line, of a block

 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
NEW BLOCK ----         [blockparse: center]
1: writerow(rowname):
NEW BLOCK ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       iter: 2
       desc: lblock1_line1
       iter: 3
       lnum: 46
       iter: 4
       desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       iter: 5
       desc: lblock1_line2
       iter: 6
       lnum: 43
       iter: 7
       desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       iter: 8
       desc: lblock1_line3
       iter: 9
       lnum: 3
       iter: 10
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||
NEW BLOCK ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       iter: 12
       desc: rblock1_line1
       iter: 13
       lnum: 97
       iter: 14
       desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       iter: 15
       desc: rblock1_line2
       iter: 16
       lnum: 33
       iter: 17
       desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       iter: 18
       desc: rblock1_line3
       iter: 19
       lnum: 44
       iter: 20
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: flowchart_blank,

 Macro Without Quotes: rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is another line, of a block

 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
NEW BLOCK ----         [blockparse: center]
1: writerow(rowname):
NEW BLOCK ----         [blockparse: center]
2: flowchart_blank,
NEW BLOCK ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       iter: 3
       desc: rblock1_line1
       iter: 4
       lnum: 97
       iter: 5
       desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       iter: 6
       desc: rblock1_line2
       iter: 7
       lnum: 33
       iter: 8
       desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       iter: 9
       desc: rblock1_line3
       iter: 10
       lnum: 44
       iter: 11
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: lblock1_line1

 Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of a block flowchart_blank not found
r(111);

end of do-file

r(111);

. local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)

. 
. local logid = subinstr("`logid'", " ", "", .)

. 
. display "|||||| DebugLog Started: Log ID = `logid'"
|||||| DebugLog Started: Log ID = 31Jul2017_113348

. local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)

. 
. local logid = subinstr("`logid'", " ", "", .)

. 
. display "|||||| DebugLog Started: Log ID = `logid'"
|||||| DebugLog Started: Log ID = 31Jul2017_113400

. capture log query DebugLog

. if("`r(status)'" == "off") {
. 
. capture log close DebugLog
. 
. log using "DebugLog.log", name(DebugLog) append text
. 
. }

. 
. else {
. 
. capture log close DebugLog
. 
. log using "DebugLog.log", name(DebugLog) replace text
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 11:34:38
. 
. }

. log off DebugLog
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 paused on:  31 Jul 2017, 11:34:59
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

. if("`r(status)'" == "off") {
. 
. capture log close DebugLog
. 
. log using "DebugLog.log", name(DebugLog) append text
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 11:35:08
. 
. }

. 
. else {
. 
. capture log close DebugLog
. 
. log using "DebugLog.log", name(DebugLog) replace text
. 
. }

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display `"Subcommand via GetToken: `subcommand'"'
 66.                         }
 67.                         local subcmdsyntax = "`1'"
 68.                         if("$Flowchart_Debug" == "on") {
 69.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 70.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 71.                                 display `"Compound Quotes (CQ's):  `0'"'
 72.                         }
 73.                 }
 74.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 75.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 76.                 if("$Flowchart_Debug" == "on") {
 77.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 78.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 79.                 }
 80.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 81.         
.                         gettoken varfirst varothers : 0
 82.                         if("$Flowchart_Debug" == "on") {
 83.                                 display "ROW CONTENT: "
 84.                                 display ""
 85.                                 display " First Variable: `varfirst'"
 86.                                 display ""
 87.                                 display " Macro Without Quotes: " `varothers'
 88.                                 display ""
 89.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 90.                                 display ""
 91.                                 display `" Entire Statement (With CQ's): `0'"'
 92.                                 display ""
 93. 
.                                 display `"TOKENS:"'
 94.                                 display ""
 95.                         }
 96.                         
.                         local i = 1             // Token Iterator
 97.                         local blockparse = "center"                                             // First Block Default = Center
 98. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
 99. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
100.                                 if("$Flowchart_Debug" == "on") {
101.                                         display "NEW BLOCK ----         [blockparse: `blockparse']"
102.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
103.                                 }
104.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
105.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
106.                                         continue
107.                                 }
108.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
109.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
110.                                         local i = `i' + 1       // Move to the next token after the loop continues.
111.                                         continue
112.                                 }
113.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
114.                                 if("$Flowchart_Debug" == "on") {
115.                                         display `"          [blockparse: `blockparse']"'
116.                                         display `"                      LA: ``ilookahead'' "'
117.                                 }
118.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
119.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
120.                                 } // fi: End of BlockParse
121.                                 else if("`blockparse'" == "left") {
122.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
123.                                 } // fi: End of BlockParse
124.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
125.                                 local stop = ""
126.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
127.                                         if("$Flowchart_Debug" == "on") {
128.                                                 display " ---- NEW LINE"
129.                                         }
130.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
131.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
132.                                                         display " --- "
133.                                                         display " --- Blank First Row --- "
134.                                                         display " ---   Switching to parse the next block."
135.                                                         display " --- "
136.                                                 }
137.                                                 local blockparse = "left"
138.                                                 local stop = "stop"
139.                                                 break
140.                                         }
141.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
142.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
143.                                         }
144.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
145.                                                 if("$Flowchart_Debug" == "on") {
146.                                                         display "       iter: `i'"
147.                                                         display "       desc: ``i''"
148.                                                 }
149.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
150.                                                 if("$Flowchart_Debug" == "on") {
151.                                                         display "       iter: `i'"
152.                                                         display "       lnum: ``i''"
153.                                                 }
154.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
155.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
156.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
157.                                                 if("$Flowchart_Debug" == "on") {
158.                                                         display "       iter: `i'"
159.                                                         display "       desc: ``i''"
160.                                                 }
161.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
162.                                         if("$Flowchart_Debug" == "on") {
163.                                                 display "   Added to Block - Line `k': "
164.                                         }
165.                                         if(`k' == 1) {
166.                                                 if(trim("``ilookahead''") == ",") {
167.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
168.                                                 }
169.                                                 else {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
171.                                                 }
172.                                         }
173.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
174.                                                 local ilookaheadx2 = `ilookahead' + 1
175.                                                         if("$Flowchart_Debug" == "on") {
176.                                                                 display "Look Ahead x 1: ``ilookahead''"
177.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
178.                                                         }
179.                                                 if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
185.                                                 }
186.                                                 else if((trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookahead''")) == "flowchart_blank" ) {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
189.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
192.                                                 }
193.                                                 else {
194.                                                         if("$Flowchart_Debug" == "on") {
195.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
196.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
197.                                                         }
198.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
199.                                                 }
200.                                         }
201.                                         else {
202.                                                         if("$Flowchart_Debug" == "on") {
203.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
204.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
205.                                                         }
206.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
207.                                         }
208.                                         if("$Flowchart_Debug" == "on") {
209.                                                 display " ---- END OF LINE"
210.                                                 display ""
211.                                         }
212.                                         local k = `k' + 1
213.                                         local i = `i' + 1
214.                                         local ilookahead = `ilookahead' + 3
215.                                         if("$Flowchart_Debug" == "on") {
216.                                                 display `"                      LA: ``ilookahead'' "'
217.                                         }
218.                                         if(trim("``i''") == "," | "``i''" == "") {
219.                                                 local blockparse = "left"
220.                                                 local stop = "stop"
221.                                         }
222.                                                 
.                                 } // elihw: End of LineWhileLoop
223.         
. if("$Flowchart_Debug" == "on") {
224.         flowchart_tdwrite_blockfield `"      %  end block for row: `subparam'"' // End of the Row
225. }
226.                                 local i = `i' + 1
227.                         } // elihw: End of TokenWhile
228.                 } // fi: End of Writerow
229.         } // fi: End of SyntaxCmdElse
230. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" + "      & \\"
 15.                                 }
 16.                                 else {
 17.                                         local suffix = "}; \\"
 18.                                 }
 19.                         }
 20.                         else {
 21.                                 local suffix = "};"
 22.                         }
 23.                 }
 24.                 else {
 25.                         local suffix = "\\"
 26.                 }
 27. 
.                 if("`indent'" != "") {
 28.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 29.                 }
 30.                 else {
 31.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 32.                 }
 33.         }
 34. if("$Flowchart_Debug" == "on") {
 35.         display `"Blockfield Linestring: `linestring'"'
 36. }
 37. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 38. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 39. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_113532
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 11:35:32

. 
. * TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: lblock1_line1

 Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of a block rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line3
> 44This is another line, of a block

 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
NEW BLOCK ----         [blockparse: center]
1: writerow(rowname):
NEW BLOCK ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       iter: 2
       desc: lblock1_line1
       iter: 3
       lnum: 46
       iter: 4
       desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       iter: 5
       desc: lblock1_line2
       iter: 6
       lnum: 43
       iter: 7
       desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       iter: 8
       desc: lblock1_line3
       iter: 9
       lnum: 3
       iter: 10
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||
NEW BLOCK ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       iter: 12
       desc: rblock1_line1
       iter: 13
       lnum: 97
       iter: 14
       desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       iter: 15
       desc: rblock1_line2
       iter: 16
       lnum: 33
       iter: 17
       desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       iter: 18
       desc: rblock1_line3
       iter: 19
       lnum: 44
       iter: 20
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: flowchart_blank,

 Macro Without Quotes: rblock1_line197This is one line, of a block.rblock1_line233This is another line, of a blockrblock1_line344This is another line, of a block

 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
NEW BLOCK ----         [blockparse: center]
1: writerow(rowname):
NEW BLOCK ----         [blockparse: center]
2: flowchart_blank,
NEW BLOCK ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       iter: 3
       desc: rblock1_line1
       iter: 4
       lnum: 97
       iter: 5
       desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       iter: 6
       desc: rblock1_line2
       iter: 7
       lnum: 33
       iter: 8
       desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       iter: 9
       desc: rblock1_line3
       iter: 10
       lnum: 44
       iter: 11
       desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  end block for row: rowname|, 2=||, 3=|| indent=||

. 
. * TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow
ROW CONTENT: 

 First Variable: lblock1_line1

 Macro Without Quotes: 46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of a block flowchart_blank not found
r(111);

end of do-file

r(111);

. local varothers "46This is one line, \\ of a block.lblock1_line243This is another line, of a blocklblock1_line33This is another line, of a block flowchart_blank"

. display " Macro Without Quotes: " `varothers'
 Macro Without Quotes: 46This invalid name
r(198);

. capture display " Macro Without Quotes: " `varothers'

. capture noisily display " Macro Without Quotes: " `varothers'
 Macro Without Quotes: 46This invalid name

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
146.                                                 if("$Flowchart_Debug" == "on") {
147.                                                         display "       token: `i'"
148.                                                         display "        desc: ``i''"
149.                                                 }
150.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        lnum: ``i''"
154.                                                 }
155.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
156.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
157.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
158.                                                 if("$Flowchart_Debug" == "on") {
159.                                                         display "       token: `i'"
160.                                                         display "        desc: ``i''"
161.                                                 }
162.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
163.                                         if("$Flowchart_Debug" == "on") {
164.                                                 display "   Added to Block - Line `k': "
165.                                         }
166.                                         if(`k' == 1) {
167.                                                 if(trim("``ilookahead''") == ",") {
168.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
169.                                                 }
170.                                                 else {
171.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
172.                                                 }
173.                                         }
174.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
175.                                                 local ilookaheadx2 = `ilookahead' + 1
176.                                                         if("$Flowchart_Debug" == "on") {
177.                                                                 display "Look Ahead x 1: ``ilookahead''"
178.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
179.                                                         }
180.                                                 if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
186.                                                 }
187.                                                 else if((trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookahead''")) == "flowchart_blank" ) {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
190.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
191.                                                         }
192.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
193.                                                 }
194.                                                 else {
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
197.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
198.                                                         }
199.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
200.                                                 }
201.                                         }
202.                                         else {
203.                                                         if("$Flowchart_Debug" == "on") {
204.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
205.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
206.                                                         }
207.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
208.                                         }
209.                                         if("$Flowchart_Debug" == "on") {
210.                                                 display " ---- END OF LINE"
211.                                                 display ""
212.                                         }
213.                                         local k = `k' + 1
214.                                         local i = `i' + 1
215.                                         local ilookahead = `ilookahead' + 3
216.                                         if("$Flowchart_Debug" == "on") {
217.                                                 display `"                      LA: ``ilookahead'' "'
218.                                         }
219.                                         if(trim("``i''") == "," | "``i''" == "") {
220.                                                 local blockparse = "left"
221.                                                 local stop = "stop"
222.                                         }
223.                                                 
.                                 } // elihw: End of LineWhileLoop
224.         
. if("$Flowchart_Debug" == "on") {
225.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
226. }
227.                                 local i = `i' + 1
228.                         } // elihw: End of TokenWhile
229.                 } // fi: End of Writerow
230.         } // fi: End of SyntaxCmdElse
231. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44. }
 45. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_120512
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:05:12

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
146.                                                 if("$Flowchart_Debug" == "on") {
147.                                                         display "       token: `i'"
148.                                                         display "        desc: ``i''"
149.                                                 }
150.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        lnum: ``i''"
154.                                                 }
155.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
156.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
157.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
158.                                                 if("$Flowchart_Debug" == "on") {
159.                                                         display "       token: `i'"
160.                                                         display "        desc: ``i''"
161.                                                 }
162.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
163.                                         if("$Flowchart_Debug" == "on") {
164.                                                 display "   Added to Block - Line `k': "
165.                                         }
166.                                         if(`k' == 1) {
167.                                                 if(trim("``ilookahead''") == ",") {
168.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
169.                                                 }
170.                                                 else {
171.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
172.                                                 }
173.                                         }
174.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
175.                                                 local ilookaheadx2 = `ilookahead' + 1
176.                                                         if("$Flowchart_Debug" == "on") {
177.                                                                 display "Look Ahead x 1: ``ilookahead''"
178.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
179.                                                         }
180.                                                 if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
186.                                                 }
187.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
190.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
191.                                                         }
192.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
193.                                                 }
194.                                                 else {
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
197.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
198.                                                         }
199.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
200.                                                 }
201.                                         }
202.                                         else {
203.                                                         if("$Flowchart_Debug" == "on") {
204.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
205.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
206.                                                         }
207.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
208.                                         }
209.                                         if("$Flowchart_Debug" == "on") {
210.                                                 display " ---- END OF LINE"
211.                                                 display ""
212.                                         }
213.                                         local k = `k' + 1
214.                                         local i = `i' + 1
215.                                         local ilookahead = `ilookahead' + 3
216.                                         if("$Flowchart_Debug" == "on") {
217.                                                 display `"                      LA: ``ilookahead'' "'
218.                                         }
219.                                         if(trim("``i''") == "," | "``i''" == "") {
220.                                                 local blockparse = "left"
221.                                                 local stop = "stop"
222.                                         }
223.                                                 
.                                 } // elihw: End of LineWhileLoop
224.         
. if("$Flowchart_Debug" == "on") {
225.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
226. }
227.                                 local i = `i' + 1
228.                         } // elihw: End of TokenWhile
229.                 } // fi: End of Writerow
230.         } // fi: End of SyntaxCmdElse
231. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44. }
 45. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_122213
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:22:13

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
146.                                                 if("$Flowchart_Debug" == "on") {
147.                                                         display "       token: `i'"
148.                                                         display "        desc: ``i''"
149.                                                 }
150.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        lnum: ``i''"
154.                                                 }
155.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
156.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
157.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
158.                                                 if("$Flowchart_Debug" == "on") {
159.                                                         display "       token: `i'"
160.                                                         display "        desc: ``i''"
161.                                                 }
162.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
163.                                         if("$Flowchart_Debug" == "on") {
164.                                                 display "   Added to Block - Line `k': "
165.                                         }
166.                                         if(`k' == 1) {
167.                                                 if(trim("``ilookahead''") == ",") {
168.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
169.                                                 }
170.                                                 else {
171.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
172.                                                 }
173.                                         }
174.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
175.                                                 local ilookaheadx2 = `ilookahead' + 1
176.                                                         if("$Flowchart_Debug" == "on") {
177.                                                                 display "Look Ahead x 1: ``ilookahead''"
178.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
179.                                                         }
180.                                                 if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
186.                                                 }
187.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
190.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
191.                                                         }
192.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
193.                                                 }
194.                                                 else {
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
197.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
198.                                                         }
199.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
200.                                                 }
201.                                         }
202.                                         else {
203.                                                         if("$Flowchart_Debug" == "on") {
204.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
205.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
206.                                                         }
207.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
208.                                         }
209.                                         if("$Flowchart_Debug" == "on") {
210.                                                 display " ---- END OF LINE"
211.                                                 display ""
212.                                         }
213.                                         local k = `k' + 1
214.                                         local i = `i' + 1
215.                                         local ilookahead = `ilookahead' + 3
216.                                         if("$Flowchart_Debug" == "on") {
217.                                                 display `"                      LA: ``ilookahead'' "'
218.                                         }
219.                                         if(trim("``i''") == "," | "``i''" == "") {
220.                                                 local blockparse = "left"
221.                                                 local stop = "stop"
222.                                         }
223.                                                 
.                                 } // elihw: End of LineWhileLoop
224.         
. if("$Flowchart_Debug" == "on") {
225.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
226. }
227.                                 local i = `i' + 1
228.                         } // elihw: End of TokenWhile
229.                 } // fi: End of Writerow
230.         } // fi: End of SyntaxCmdElse
231. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_122659
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:26:59

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
146.                                                 if("$Flowchart_Debug" == "on") {
147.                                                         display "       token: `i'"
148.                                                         display "        desc: ``i''"
149.                                                 }
150.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        lnum: ``i''"
154.                                                 }
155.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
156.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
157.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
158.                                                 if("$Flowchart_Debug" == "on") {
159.                                                         display "       token: `i'"
160.                                                         display "        desc: ``i''"
161.                                                 }
162.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
163.                                         if("$Flowchart_Debug" == "on") {
164.                                                 display "   Added to Block - Line `k': "
165.                                         }
166.                                         if(`k' == 1) {
167.                                                 if(trim("``ilookahead''") == ",") {
168.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
169.                                                 }
170.                                                 else {
171.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
172.                                                 }
173.                                         }
174.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
175.                                                 local ilookaheadx2 = `ilookahead' + 1
176.                                                         if("$Flowchart_Debug" == "on") {
177.                                                                 display "Look Ahead x 1: ``ilookahead''"
178.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
179.                                                         }
180.                                                 if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
186.                                                 }
187.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
190.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
191.                                                         }
192.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
193.                                                 }
194.                                                 else {
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
197.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
198.                                                         }
199.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
200.                                                 }
201.                                         }
202.                                         else {
203.                                                         if("$Flowchart_Debug" == "on") {
204.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
205.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
206.                                                         }
207.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
208.                                         }
209.                                         if("$Flowchart_Debug" == "on") {
210.                                                 display " ---- END OF LINE"
211.                                                 display ""
212.                                         }
213.                                         local k = `k' + 1
214.                                         local i = `i' + 1
215.                                         local ilookahead = `ilookahead' + 3
216.                                         if("$Flowchart_Debug" == "on") {
217.                                                 display `"                      LA: ``ilookahead'' "'
218.                                         }
219.                                         if(trim("``i''") == "," | "``i''" == "") {
220.                                                 local blockparse = "left"
221.                                                 local stop = "stop"
222.                                         }
223.                                                 
.                                 } // elihw: End of LineWhileLoop
224.         
. if("$Flowchart_Debug" == "on") {
225.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
226. }
227.                                 local i = `i' + 1
228.                         } // elihw: End of TokenWhile
229.                 } // fi: End of Writerow
230.         } // fi: End of SyntaxCmdElse
231. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_122732
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:27:32

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
Blockfield Linestring:       & \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
146.                                                 if("$Flowchart_Debug" == "on") {
147.                                                         display "       token: `i'"
148.                                                         display "        desc: ``i''"
149.                                                 }
150.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        lnum: ``i''"
154.                                                 }
155.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
156.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
157.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
158.                                                 if("$Flowchart_Debug" == "on") {
159.                                                         display "       token: `i'"
160.                                                         display "        desc: ``i''"
161.                                                 }
162.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
163.                                         if("$Flowchart_Debug" == "on") {
164.                                                 display "   Added to Block - Line `k': "
165.                                         }
166.                                         if(`k' == 1) {
167.                                                 if(trim("``ilookahead''") == ",") {
168.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
169.                                                 }
170.                                                 else {
171.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
172.                                                 }
173.                                         }
174.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
175.                                                 local ilookaheadx2 = `ilookahead' + 1
176.                                                         if("$Flowchart_Debug" == "on") {
177.                                                                 display "Look Ahead x 1: ``ilookahead''"
178.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
179.                                                         }
180.                                                 if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
186.                                                 }
187.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
190.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
191.                                                         }
192.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
193.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
194.                                                                 if("$Flowchart_Debug" == "on") {
195.                                                                         display "BREAK"
196.                                                                 }
197.                                                                 break 
198.                                                         }
199.                                                 }
200.                                                 else {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
206.                                                 }
207.                                         }
208.                                         else {
209.                                                         if("$Flowchart_Debug" == "on") {
210.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
211.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
212.                                                         }
213.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
214.                                         }
215.                                         if("$Flowchart_Debug" == "on") {
216.                                                 display " ---- END OF LINE"
217.                                                 display ""
218.                                         }
219.                                         local k = `k' + 1
220.                                         local i = `i' + 1
221.                                         local ilookahead = `ilookahead' + 3
222.                                         if("$Flowchart_Debug" == "on") {
223.                                                 display `"                      LA: ``ilookahead'' "'
224.                                         }
225.                                         if(trim("``i''") == "," | "``i''" == "") {
226.                                                 local blockparse = "left"
227.                                                 local stop = "stop"
228.                                         }
229.                                                 
.                                 } // elihw: End of LineWhileLoop
230.         
. if("$Flowchart_Debug" == "on") {
231.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
232. }
233.                                 local i = `i' + 1
234.                         } // elihw: End of TokenWhile
235.                 } // fi: End of Writerow
236.         } // fi: End of SyntaxCmdElse
237. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_123326
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:33:26

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
Blockfield Linestring:       & \\
BREAK
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
146.                                                 if("$Flowchart_Debug" == "on") {
147.                                                         display "       token: `i'"
148.                                                         display "        desc: ``i''"
149.                                                 }
150.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        lnum: ``i''"
154.                                                 }
155.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
156.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
157.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
158.                                                 if("$Flowchart_Debug" == "on") {
159.                                                         display "       token: `i'"
160.                                                         display "        desc: ``i''"
161.                                                 }
162.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
163.                                         if("$Flowchart_Debug" == "on") {
164.                                                 display "   Added to Block - Line `k': "
165.                                         }
166.                                         if(`k' == 1) {
167.                                                 if(trim("``ilookahead''") == ",") {
168.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
169.                                                 }
170.                                                 else {
171.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
172.                                                 }
173.                                         }
174.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
175.                                                 local ilookaheadx2 = `ilookahead' + 1
176.                                                         if("$Flowchart_Debug" == "on") {
177.                                                                 display "Look Ahead x 1: ``ilookahead''"
178.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
179.                                                         }
180.                                                 if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
186.                                                 }
187.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
190.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
191.                                                         }
192.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
193.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
194.                                                                 if("$Flowchart_Debug" == "on") {
195.                                                                         display "BREAK"
196.                                                                 }
197.                                                                 local stop = "stop"
198.                                                                 break 
199.                                                         }
200.                                                 }
201.                                                 else {
202.                                                         if("$Flowchart_Debug" == "on") {
203.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
204.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
205.                                                         }
206.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
207.                                                 }
208.                                         }
209.                                         else {
210.                                                         if("$Flowchart_Debug" == "on") {
211.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
212.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
213.                                                         }
214.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
215.                                         }
216.                                         if("$Flowchart_Debug" == "on") {
217.                                                 display " ---- END OF LINE"
218.                                                 display ""
219.                                         }
220.                                         local k = `k' + 1
221.                                         local i = `i' + 1
222.                                         local ilookahead = `ilookahead' + 3
223.                                         if("$Flowchart_Debug" == "on") {
224.                                                 display `"                      LA: ``ilookahead'' "'
225.                                         }
226.                                         if(trim("``i''") == "," | "``i''" == "") {
227.                                                 local blockparse = "left"
228.                                                 local stop = "stop"
229.                                         }
230.                                                 
.                                 } // elihw: End of LineWhileLoop
231.         
. if("$Flowchart_Debug" == "on") {
232.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
233. }
234.                                 local i = `i' + 1
235.                         } // elihw: End of TokenWhile
236.                 } // fi: End of Writerow
237.         } // fi: End of SyntaxCmdElse
238. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_123447
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:34:47

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
Blockfield Linestring:       & \\
BREAK
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
146.                                                 if("$Flowchart_Debug" == "on") {
147.                                                         display "       token: `i'"
148.                                                         display "        desc: ``i''"
149.                                                 }
150.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        lnum: ``i''"
154.                                                 }
155.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
156.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
157.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
158.                                                 if("$Flowchart_Debug" == "on") {
159.                                                         display "       token: `i'"
160.                                                         display "        desc: ``i''"
161.                                                 }
162.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
163.                                         if("$Flowchart_Debug" == "on") {
164.                                                 display "   Added to Block - Line `k': "
165.                                         }
166.                                         if(`k' == 1) {
167.                                                 if(trim("``ilookahead''") == ",") {
168.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
169.                                                 }
170.                                                 else {
171.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
172.                                                 }
173.                                         }
174.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
175.                                                 local ilookaheadx2 = `ilookahead' + 1
176.                                                         if("$Flowchart_Debug" == "on") {
177.                                                                 display "Look Ahead x 1: ``ilookahead''"
178.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
179.                                                         }
180.                                                 if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
186.                                                 }
187.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
190.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
191.                                                         }
192.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
193.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
194.                                                                 if("$Flowchart_Debug" == "on") {
195.                                                                         display "BREAK"
196.                                                                 }
197.                                                                 local stop = "stop"
198.                                                                 break 
199.                                                         }
200.                                                 }
201.                                                 else {
202.                                                         if("$Flowchart_Debug" == "on") {
203.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
204.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
205.                                                         }
206.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
207.                                                 }
208.                                         }
209.                                         else {
210.                                                         if("$Flowchart_Debug" == "on") {
211.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
212.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
213.                                                         }
214.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
215.                                         }
216.                                         if("$Flowchart_Debug" == "on") {
217.                                                 display " ---- END OF LINE"
218.                                                 display ""
219.                                         }
220.                                         local k = `k' + 1
221.                                         local i = `i' + 1
222.                                         local ilookahead = `ilookahead' + 3
223.                                         if("$Flowchart_Debug" == "on") {
224.                                                 display `"                      LA: ``ilookahead'' "'
225.                                         }
226.                                         if(trim("``i''") == "," | "``i''" == "") {
227.                                                 local blockparse = "left"
228.                                                 local stop = "stop"
229.                                         }
230.                                                 
.                                 } // elihw: End of LineWhileLoop
231.         
. if("$Flowchart_Debug" == "on") {
232.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
233. }
234.                                 local i = `i' + 1
235.                         } // elihw: End of TokenWhile
236.                 } // fi: End of Writerow
237.         } // fi: End of SyntaxCmdElse
238. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_123448
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:34:48

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
Blockfield Linestring:       & \\
BREAK
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
146.                                                 if("$Flowchart_Debug" == "on") {
147.                                                         display "       token: `i'"
148.                                                         display "        desc: ``i''"
149.                                                 }
150.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        lnum: ``i''"
154.                                                 }
155.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
156.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
157.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
158.                                                 if("$Flowchart_Debug" == "on") {
159.                                                         display "       token: `i'"
160.                                                         display "        desc: ``i''"
161.                                                 }
162.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
163.                                         if("$Flowchart_Debug" == "on") {
164.                                                 display "   Added to Block - Line `k': "
165.                                         }
166.                                         if(`k' == 1) {
167.                                                 if(trim("``ilookahead''") == ",") {
168.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
169.                                                 }
170.                                                 else {
171.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
172.                                                 }
173.                                         }
174.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
175.                                                 local ilookaheadx2 = `ilookahead' + 1
176.                                                         if("$Flowchart_Debug" == "on") {
177.                                                                 display "Look Ahead x 1: ``ilookahead''"
178.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
179.                                                         }
180.                                                 if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
186.                                                 }
187.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
190.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
191.                                                         }
192.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
193.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
194.                                                                 if("$Flowchart_Debug" == "on") {
195.                                                                         display "BREAK"
196.                                                                 }
197.                                                                 local stop = "stop"
198.                                                                 local `i' = `i' + 1
199.                                                                 local `i' = ""
200.                                                                 break 
201.                                                         }
202.                                                 }
203.                                                 else {
204.                                                         if("$Flowchart_Debug" == "on") {
205.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
206.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
207.                                                         }
208.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
209.                                                 }
210.                                         }
211.                                         else {
212.                                                         if("$Flowchart_Debug" == "on") {
213.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
214.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
215.                                                         }
216.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
217.                                         }
218.                                         if("$Flowchart_Debug" == "on") {
219.                                                 display " ---- END OF LINE"
220.                                                 display ""
221.                                         }
222.                                         local k = `k' + 1
223.                                         local i = `i' + 1
224.                                         local ilookahead = `ilookahead' + 3
225.                                         if("$Flowchart_Debug" == "on") {
226.                                                 display `"                      LA: ``ilookahead'' "'
227.                                         }
228.                                         if(trim("``i''") == "," | "``i''" == "") {
229.                                                 local blockparse = "left"
230.                                                 local stop = "stop"
231.                                         }
232.                                                 
.                                 } // elihw: End of LineWhileLoop
233.         
. if("$Flowchart_Debug" == "on") {
234.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
235. }
236.                                 local i = `i' + 1
237.                         } // elihw: End of TokenWhile
238.                 } // fi: End of Writerow
239.         } // fi: End of SyntaxCmdElse
240. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_123650
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:36:50

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
Blockfield Linestring:       & \\
BREAK
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
146.                                                 if("$Flowchart_Debug" == "on") {
147.                                                         display "       token: `i'"
148.                                                         display "        desc: ``i''"
149.                                                 }
150.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        lnum: ``i''"
154.                                                 }
155.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
156.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
157.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
158.                                                 if("$Flowchart_Debug" == "on") {
159.                                                         display "       token: `i'"
160.                                                         display "        desc: ``i''"
161.                                                 }
162.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
163.                                         if("$Flowchart_Debug" == "on") {
164.                                                 display "   Added to Block - Line `k': "
165.                                         }
166.                                         if(`k' == 1) {
167.                                                 if(trim("``ilookahead''") == ",") {
168.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
169.                                                 }
170.                                                 else {
171.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
172.                                                 }
173.                                         }
174.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
175.                                                 local ilookaheadx2 = `ilookahead' + 1
176.                                                         if("$Flowchart_Debug" == "on") {
177.                                                                 display "Look Ahead x 1: ``ilookahead''"
178.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
179.                                                         }
180.                                                 if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
186.                                                 }
187.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
190.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
191.                                                         }
192.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
193.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
194.                                                                 if("$Flowchart_Debug" == "on") {
195.                                                                         display "BREAK"
196.                                                                 }
197.                                                                 local stop = "stop"
198.                                                                 local `i' = `i' + 1
199.                                                                 local `i' = ""
200.                                                                 local `i' = `i' + 1
201.                                                                 local `i' = ""
202.                                                                 break 
203.                                                         }
204.                                                 }
205.                                                 else {
206.                                                         if("$Flowchart_Debug" == "on") {
207.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
208.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
209.                                                         }
210.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
211.                                                 }
212.                                         }
213.                                         else {
214.                                                         if("$Flowchart_Debug" == "on") {
215.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
216.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
217.                                                         }
218.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
219.                                         }
220.                                         if("$Flowchart_Debug" == "on") {
221.                                                 display " ---- END OF LINE"
222.                                                 display ""
223.                                         }
224.                                         local k = `k' + 1
225.                                         local i = `i' + 1
226.                                         local ilookahead = `ilookahead' + 3
227.                                         if("$Flowchart_Debug" == "on") {
228.                                                 display `"                      LA: ``ilookahead'' "'
229.                                         }
230.                                         if(trim("``i''") == "," | "``i''" == "") {
231.                                                 local blockparse = "left"
232.                                                 local stop = "stop"
233.                                         }
234.                                                 
.                                 } // elihw: End of LineWhileLoop
235.         
. if("$Flowchart_Debug" == "on") {
236.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
237. }
238.                                 local i = `i' + 1
239.                         } // elihw: End of TokenWhile
240.                 } // fi: End of Writerow
241.         } // fi: End of SyntaxCmdElse
242. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_123757
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:37:57

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
Blockfield Linestring:       & \\
BREAK
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 local stop = "stop"
147.                                                 break
148.                                         }
149.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
150.                                                 if("$Flowchart_Debug" == "on") {
151.                                                         display "       token: `i'"
152.                                                         display "        desc: ``i''"
153.                                                 }
154.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
155.                                                 if("$Flowchart_Debug" == "on") {
156.                                                         display "       token: `i'"
157.                                                         display "        lnum: ``i''"
158.                                                 }
159.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
160.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
161.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
162.                                                 if("$Flowchart_Debug" == "on") {
163.                                                         display "       token: `i'"
164.                                                         display "        desc: ``i''"
165.                                                 }
166.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
167.                                         if("$Flowchart_Debug" == "on") {
168.                                                 display "   Added to Block - Line `k': "
169.                                         }
170.                                         if(`k' == 1) {
171.                                                 if(trim("``ilookahead''") == ",") {
172.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
173.                                                 }
174.                                                 else {
175.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
176.                                                 }
177.                                         }
178.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
179.                                                 local ilookaheadx2 = `ilookahead' + 1
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "Look Ahead x 1: ``ilookahead''"
182.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
183.                                                         }
184.                                                 if(trim("``ilookahead''") == "") {
185.                                                         if("$Flowchart_Debug" == "on") {
186.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
187.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
188.                                                         }
189.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
190.                                                 }
191.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
192.                                                         if("$Flowchart_Debug" == "on") {
193.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
194.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
195.                                                         }
196.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
197.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
198.                                                                 if("$Flowchart_Debug" == "on") {
199.                                                                         display "BREAK"
200.                                                                 }
201.                                                                 local stop = "stop"
202.                                                                 break 
203.                                                         }
204.                                                 }
205.                                                 else {
206.                                                         if("$Flowchart_Debug" == "on") {
207.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
208.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
209.                                                         }
210.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
211.                                                 }
212.                                         }
213.                                         else {
214.                                                         if("$Flowchart_Debug" == "on") {
215.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
216.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
217.                                                         }
218.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
219.                                         }
220.                                         if("$Flowchart_Debug" == "on") {
221.                                                 display " ---- END OF LINE"
222.                                                 display ""
223.                                         }
224.                                         local k = `k' + 1
225.                                         local i = `i' + 1
226.                                         local ilookahead = `ilookahead' + 3
227.                                         if("$Flowchart_Debug" == "on") {
228.                                                 display `"                      LA: ``ilookahead'' "'
229.                                         }
230.                                         if(trim("``i''") == "," | "``i''" == "") {
231.                                                 local blockparse = "left"
232.                                                 local stop = "stop"
233.                                         }
234.                                                 
.                                 } // elihw: End of LineWhileLoop
235.         
. if("$Flowchart_Debug" == "on") {
236.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
237. }
238.                                 local i = `i' + 1
239.                         } // elihw: End of TokenWhile
240.                 } // fi: End of Writerow
241.         } // fi: End of SyntaxCmdElse
242. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_124128
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:41:28

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
Blockfield Linestring:       & \\
BREAK
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while "``i''" != "" {   // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 local ``i'' = ""
147.                                                 local stop = "stop"
148.                                                 break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
174.                                                 }
175.                                                 else {
176.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
177.                                                 }
178.                                         }
179.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
180.                                                 local ilookaheadx2 = `ilookahead' + 1
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "Look Ahead x 1: ``ilookahead''"
183.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
184.                                                         }
185.                                                 if(trim("``ilookahead''") == "") {
186.                                                         if("$Flowchart_Debug" == "on") {
187.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
188.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
191.                                                 }
192.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
193.                                                         if("$Flowchart_Debug" == "on") {
194.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
195.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
196.                                                         }
197.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
198.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
199.                                                                 if("$Flowchart_Debug" == "on") {
200.                                                                         display "BREAK"
201.                                                                 }
202.                                                                 local stop = "stop"
203.                                                                 break 
204.                                                         }
205.                                                 }
206.                                                 else {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
212.                                                 }
213.                                         }
214.                                         else {
215.                                                         if("$Flowchart_Debug" == "on") {
216.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
217.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
218.                                                         }
219.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
220.                                         }
221.                                         if("$Flowchart_Debug" == "on") {
222.                                                 display " ---- END OF LINE"
223.                                                 display ""
224.                                         }
225.                                         local k = `k' + 1
226.                                         local i = `i' + 1
227.                                         local ilookahead = `ilookahead' + 3
228.                                         if("$Flowchart_Debug" == "on") {
229.                                                 display `"                      LA: ``ilookahead'' "'
230.                                         }
231.                                         if(trim("``i''") == "," | "``i''" == "") {
232.                                                 local blockparse = "left"
233.                                                 local stop = "stop"
234.                                         }
235.                                                 
.                                 } // elihw: End of LineWhileLoop
236.         
. if("$Flowchart_Debug" == "on") {
237.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
238. }
239.                                 local i = `i' + 1
240.                         } // elihw: End of TokenWhile
241.                 } // fi: End of Writerow
242.         } // fi: End of SyntaxCmdElse
243. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_124207
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:42:07

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
Blockfield Linestring:       & \\
BREAK
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 12] [ token: flowchart_blank] [ k: 1]
       token: 12
        desc: flowchart_blank
       token: 13
        lnum: 
       token: 14
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. help continue

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 *local stop = "stop"
.                                                 *break
.                                         }
147.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
148.                                                 if("$Flowchart_Debug" == "on") {
149.                                                         display "       token: `i'"
150.                                                         display "        desc: ``i''"
151.                                                 }
152.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
153.                                                 if("$Flowchart_Debug" == "on") {
154.                                                         display "       token: `i'"
155.                                                         display "        lnum: ``i''"
156.                                                 }
157.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
158.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
159.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
160.                                                 if("$Flowchart_Debug" == "on") {
161.                                                         display "       token: `i'"
162.                                                         display "        desc: ``i''"
163.                                                 }
164.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
165.                                         if("$Flowchart_Debug" == "on") {
166.                                                 display "   Added to Block - Line `k': "
167.                                         }
168.                                         if(`k' == 1) {
169.                                                 if(trim("``ilookahead''") == ",") {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
171.                                                 }
172.                                                 else {
173.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
174.                                                 }
175.                                         }
176.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
177.                                                 local ilookaheadx2 = `ilookahead' + 1
178.                                                         if("$Flowchart_Debug" == "on") {
179.                                                                 display "Look Ahead x 1: ``ilookahead''"
180.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
181.                                                         }
182.                                                 if(trim("``ilookahead''") == "") {
183.                                                         if("$Flowchart_Debug" == "on") {
184.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
185.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
186.                                                         }
187.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
188.                                                 }
189.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
190.                                                         if("$Flowchart_Debug" == "on") {
191.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
192.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
193.                                                         }
194.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
195.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
196.                                                                 if("$Flowchart_Debug" == "on") {
197.                                                                         display "BREAK"
198.                                                                 }
199.                                                                 local stop = "stop"
200.                                                                 local i = `i' + 1
201.                                                                 continue, break 
202.                                                         }
203.                                                 }
204.                                                 else {
205.                                                         if("$Flowchart_Debug" == "on") {
206.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
207.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
208.                                                         }
209.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
210.                                                 }
211.                                         }
212.                                         else {
213.                                                         if("$Flowchart_Debug" == "on") {
214.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
215.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
216.                                                         }
217.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
218.                                         }
219.                                         if("$Flowchart_Debug" == "on") {
220.                                                 display " ---- END OF LINE"
221.                                                 display ""
222.                                         }
223.                                         local k = `k' + 1
224.                                         local i = `i' + 1
225.                                         local ilookahead = `ilookahead' + 3
226.                                         if("$Flowchart_Debug" == "on") {
227.                                                 display `"                      LA: ``ilookahead'' "'
228.                                         }
229.                                         if(trim("``i''") == "," | "``i''" == "") {
230.                                                 local blockparse = "left"
231.                                                 local stop = "stop"
232.                                         }
233.                                                 
.                                 } // elihw: End of LineWhileLoop
234.         
. if("$Flowchart_Debug" == "on") {
235.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
236. }
237.                                 local i = `i' + 1
238.                         } // elihw: End of TokenWhile
239.                 } // fi: End of Writerow
240.         } // fi: End of SyntaxCmdElse
241. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
> *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
> *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
> *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
> *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
> *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
> *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
> *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
> *               will not compile the TikZ picture.
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> display "Start Isaac"
> flowchart writerow(random): "randomized" 102 "Randomized", 
>         flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_124521
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:45:21

. 
. * |||||| TEST1: Dummy Row
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1
> _line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "Thi
> s is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block",         "rblock1_line1" 97 "This is one line, of a block." "r
> block1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: rblock1_line1
...--- End of Row: tdwriteline - [content] [end]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) };
 ---- END OF LINE

                      LA: This is one line, of a block. 
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
12: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 12
        desc: rblock1_line1
       token: 13
        lnum: 97
       token: 14
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 15
        desc: rblock1_line2
       token: 16
        lnum: 33
       token: 17
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 18
        desc: rblock1_line3
       token: 19
        lnum: 44
       token: 20
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 20] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA: rblock1_line2 
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rowname_left) { This is one line, of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA: rblock1_line3 
 ---- NEW LINE
       token: 6
        desc: rblock1_line2
       token: 7
        lnum: 33
       token: 8
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 8] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line2}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 9
        desc: rblock1_line3
       token: 10
        lnum: 44
       token: 11
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 11] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{rblock1_line3}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rowname):
Subcommand with Parameter:  writerow(rowname)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
Subparameter via String Parse (CQs):  rowname
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

TOKENS:

1=|      % Row - rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rowname):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: lblock1_line2 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rowname_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1}): \\
 ---- END OF LINE

                      LA: lblock1_line3 
 ---- NEW LINE
       token: 5
        desc: lblock1_line2
       token: 6
        lnum: 43
       token: 7
        desc: This is another line, of a block
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: center] [ i#: 7] [ token: This is another line, of a block] [ k: 2]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line2}) \\
 ---- END OF LINE

                      LA: , 
 ---- NEW LINE
       token: 8
        desc: lblock1_line3
       token: 9
        lnum: 3
       token: 10
        desc: This is another line, of a block
   Added to Block - Line 3: 
Look Ahead x 1: ,
Look Ahead x 2: flowchart_blank
...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]
      [blockparse: center] [ i#: 10] [ token: This is another line, of a block] [ k: 3]
Blockfield Linestring:         \h This is another line, of a block (n=\figvalue{lblock1_line3}) }; \\
Blockfield Linestring:       & \\
BREAK
1=|      %  Debug - End block for row: rowname|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
12: flowchart_blank

. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")
Closed.
98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 *local stop = "stop"
.                                                 *break
.                                         }
147.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
148.                                                 if("$Flowchart_Debug" == "on") {
149.                                                         display "       token: `i'"
150.                                                         display "        desc: ``i''"
151.                                                 }
152.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
153.                                                 if("$Flowchart_Debug" == "on") {
154.                                                         display "       token: `i'"
155.                                                         display "        lnum: ``i''"
156.                                                 }
157.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
158.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
159.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
160.                                                 if("$Flowchart_Debug" == "on") {
161.                                                         display "       token: `i'"
162.                                                         display "        desc: ``i''"
163.                                                 }
164.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
165.                                         if("$Flowchart_Debug" == "on") {
166.                                                 display "   Added to Block - Line `k': "
167.                                         }
168.                                         if(`k' == 1) {
169.                                                 if(trim("``ilookahead''") == ",") {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
171.                                                 }
172.                                                 else {
173.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
174.                                                 }
175.                                         }
176.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
177.                                                 local ilookaheadx2 = `ilookahead' + 1
178.                                                         if("$Flowchart_Debug" == "on") {
179.                                                                 display "Look Ahead x 1: ``ilookahead''"
180.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
181.                                                         }
182.                                                 if(trim("``ilookahead''") == "") {
183.                                                         if("$Flowchart_Debug" == "on") {
184.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
185.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
186.                                                         }
187.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
188.                                                 }
189.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
190.                                                         if("$Flowchart_Debug" == "on") {
191.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
192.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
193.                                                         }
194.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
195.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
196.                                                                 if("$Flowchart_Debug" == "on") {
197.                                                                         display "BREAK"
198.                                                                 }
199.                                                                 local stop = "stop"
200.                                                                 local i = `i' + 1
201.                                                                 continue, break 
202.                                                         }
203.                                                 }
204.                                                 else {
205.                                                         if("$Flowchart_Debug" == "on") {
206.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
207.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
208.                                                         }
209.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
210.                                                 }
211.                                         }
212.                                         else {
213.                                                         if("$Flowchart_Debug" == "on") {
214.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
215.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
216.                                                         }
217.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
218.                                         }
219.                                         if("$Flowchart_Debug" == "on") {
220.                                                 display " ---- END OF LINE"
221.                                                 display ""
222.                                         }
223.                                         local k = `k' + 1
224.                                         local i = `i' + 1
225.                                         local ilookahead = `ilookahead' + 3
226.                                         if("$Flowchart_Debug" == "on") {
227.                                                 display `"                      LA: ``ilookahead'' "'
228.                                         }
229.                                         if(trim("``i''") == "," | "``i''" == "") {
230.                                                 local blockparse = "left"
231.                                                 local stop = "stop"
232.                                         }
233.                                                 
.                                 } // elihw: End of LineWhileLoop
234.         
. if("$Flowchart_Debug" == "on") {
235.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
236. }
237.                                 local i = `i' + 1
238.                         } // elihw: End of TokenWhile
239.                 } // fi: End of Writerow
240.         } // fi: End of SyntaxCmdElse
241. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. 
. * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
. *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
. *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
. *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
. *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
. *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
. *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
. *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
. *               will not compile the TikZ picture.
. flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(enrollment):
Subcommand with Parameter:  writerow(enrollment)
Compound Quotes (CQ's):           "referred" 173 "Referred",         "referred_excluded" 17 "Excluded"         "referred_excluded_nopartic" 9 "a) Did not wish to participate"         "referred_excluded_noshow" 5 "b) Did not show for interview"         "re
> ferred_excluded_other" 3 "c) Other reasons"
Subparameter via String Parse (CQs):  enrollment
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: referred


 Compound Quotes (CQ's):   173 "Referred",         "referred_excluded" 17 "Excluded"         "referred_excluded_nopartic" 9 "a) Did not wish to participate"         "referred_excluded_noshow" 5 "b) Did not show for interview"         "referred_excluded_ot
> her" 3 "c) Other reasons"

 Entire Statement (With CQ's):          "referred" 173 "Referred",         "referred_excluded" 17 "Excluded"         "referred_excluded_nopartic" 9 "a) Did not wish to participate"         "referred_excluded_noshow" 5 "b) Did not show for interview"      
>    "referred_excluded_other" 3 "c) Other reasons"

TOKENS:

1=|      % Row - enrollment|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(enrollment):
BLOCK START ----         [blockparse: center]
2: referred
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: referred
       token: 3
        lnum: 173
       token: 4
        desc: Referred
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (enrollment_center) { Referred (n=\figvalue{referred})}; 
 ---- END OF LINE

                      LA: Excluded 
1=|      %  Debug - End block for row: enrollment|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: referred_excluded
          [blockparse: left]
                      LA: referred_excluded_nopartic 
 ---- NEW LINE
       token: 6
        desc: referred_excluded
       token: 7
        lnum: 17
       token: 8
        desc: Excluded
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (enrollment_left) { Excluded (n=\figvalue{referred_excluded}): \\
 ---- END OF LINE

                      LA: referred_excluded_noshow 
 ---- NEW LINE
       token: 9
        desc: referred_excluded_nopartic
       token: 10
        lnum: 9
       token: 11
        desc: a) Did not wish to participate
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 11] [ token: a) Did not wish to participate] [ k: 2]
Blockfield Linestring:         \h a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
 ---- END OF LINE

                      LA: referred_excluded_other 
 ---- NEW LINE
       token: 12
        desc: referred_excluded_noshow
       token: 13
        lnum: 5
       token: 14
        desc: b) Did not show for interview
   Added to Block - Line 3: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 14] [ token: b) Did not show for interview] [ k: 3]
Blockfield Linestring:         \h b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 15
        desc: referred_excluded_other
       token: 16
        lnum: 3
       token: 17
        desc: c) Other reasons
   Added to Block - Line 4: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 17] [ token: c) Other reasons] [ k: 4]
Blockfield Linestring:         \h c) Other reasons (n=\figvalue{referred_excluded_other}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: enrollment|, 2=||, 3=|| indent=||

.         
. flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(assessment):
Subcommand with Parameter:  writerow(assessment)
Compound Quotes (CQ's):           "assessed" 156 "{Assessed for Eligibility",         "assessed_excluded" 54 "Excluded"         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met"         "assessed_excluded_exclusioncritmet" 13 "b) E
> xclusion criteria met"         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group"         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention"         "assessed_excluded_othertx" 3 "e) Sought other treatment"         "as
> sessed_excluded_other" 7 "f) Other reasons"
Subparameter via String Parse (CQs):  assessment
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: assessed


 Compound Quotes (CQ's):   156 "{Assessed for Eligibility",         "assessed_excluded" 54 "Excluded"         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met"         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria 
> met"         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group"         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention"         "assessed_excluded_othertx" 3 "e) Sought other treatment"         "assessed_excluded_ot
> her" 7 "f) Other reasons"

 Entire Statement (With CQ's):          "assessed" 156 "{Assessed for Eligibility",         "assessed_excluded" 54 "Excluded"         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met"         "assessed_excluded_exclusioncritmet" 13
>  "b) Exclusion criteria met"         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group"         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention"         "assessed_excluded_othertx" 3 "e) Sought other treatment"      
>    "assessed_excluded_other" 7 "f) Other reasons"

TOKENS:

1=|      % Row - assessment|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(assessment):
BLOCK START ----         [blockparse: center]
2: assessed
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: assessed
       token: 3
        lnum: 156
       token: 4
        desc: {Assessed for Eligibility
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (assessment_center) { {Assessed for Eligibility (n=\figvalue{assessed})}; 
 ---- END OF LINE

                      LA: Excluded 
1=|      %  Debug - End block for row: assessment|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: assessed_excluded
          [blockparse: left]
                      LA: assessed_excluded_inclusioncritunmet 
 ---- NEW LINE
       token: 6
        desc: assessed_excluded
       token: 7
        lnum: 54
       token: 8
        desc: Excluded
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (assessment_left) { Excluded (n=\figvalue{assessed_excluded}): \\
 ---- END OF LINE

                      LA: assessed_excluded_exclusioncritmet 
 ---- NEW LINE
       token: 9
        desc: assessed_excluded_inclusioncritunmet
       token: 10
        lnum: 22
       token: 11
        desc: a) Inclusion criteria not met
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 11] [ token: a) Inclusion criteria not met] [ k: 2]
Blockfield Linestring:         \h a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
 ---- END OF LINE

                      LA: assessed_excluded_unsuitedgroup 
 ---- NEW LINE
       token: 12
        desc: assessed_excluded_exclusioncritmet
       token: 13
        lnum: 13
       token: 14
        desc: b) Exclusion criteria met
   Added to Block - Line 3: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 14] [ token: b) Exclusion criteria met] [ k: 3]
Blockfield Linestring:         \h b) Exclusion criteria met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
 ---- END OF LINE

                      LA: assessed_excluded_unsuitedtx 
 ---- NEW LINE
       token: 15
        desc: assessed_excluded_unsuitedgroup
       token: 16
        lnum: 7
       token: 17
        desc: c) Not suited for waitlist group
   Added to Block - Line 4: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: c) Not suited for waitlist group] [ k: 4]
Blockfield Linestring:         \h c) Not suited for waitlist group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
 ---- END OF LINE

                      LA: assessed_excluded_othertx 
 ---- NEW LINE
       token: 18
        desc: assessed_excluded_unsuitedtx
       token: 19
        lnum: 2
       token: 20
        desc: d) Not suited for intervention
   Added to Block - Line 5: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 20] [ token: d) Not suited for intervention] [ k: 5]
Blockfield Linestring:         \h d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
 ---- END OF LINE

                      LA: assessed_excluded_other 
 ---- NEW LINE
       token: 21
        desc: assessed_excluded_othertx
       token: 22
        lnum: 3
       token: 23
        desc: e) Sought other treatment
   Added to Block - Line 6: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 23] [ token: e) Sought other treatment] [ k: 6]
Blockfield Linestring:         \h e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 24
        desc: assessed_excluded_other
       token: 25
        lnum: 7
       token: 26
        desc: f) Other reasons
   Added to Block - Line 7: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 26] [ token: f) Other reasons] [ k: 7]
Blockfield Linestring:         \h f) Other reasons (n=\figvalue{assessed_excluded_other}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: assessment|, 2=||, 3=|| indent=||

.         
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_124853
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:48:53

. display "Start Isaac"
Start Isaac

. flowchart writerow(random): "randomized" 102 "Randomized", 

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(random):
Subcommand with Parameter:  writerow(random)
Compound Quotes (CQ's):   "randomized" 102 "Randomized",
Subparameter via String Parse (CQs):  random
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: randomized


 Compound Quotes (CQ's):   102 "Randomized",

 Entire Statement (With CQ's):  "randomized" 102 "Randomized",

TOKENS:

1=|      % Row - random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(random):
BLOCK START ----         [blockparse: center]
2: randomized
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: randomized
       token: 3
        lnum: 102
       token: 4
        desc: Randomized
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (random_center) { Randomized (n=\figvalue{randomized})}; 
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||

.         flowchart_blank // Blank Row
unrecognized command:  flowchart_blank
r(199);

end of do-file

r(199);

. do "C:\Users\Krist\AppData\Local\Temp\STD02000000.tmp"

. 
. flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(random):
Subcommand with Parameter:  writerow(random)
Compound Quotes (CQ's):   "randomized" 102 "Randomized", flowchart_blank
Subparameter via String Parse (CQs):  random
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: randomized


 Compound Quotes (CQ's):   102 "Randomized", flowchart_blank

 Entire Statement (With CQ's):  "randomized" 102 "Randomized", flowchart_blank

TOKENS:

1=|      % Row - random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(random):
BLOCK START ----         [blockparse: center]
2: randomized
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: randomized
       token: 3
        lnum: 102
       token: 4
        desc: Randomized
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (random_center) { Randomized (n=\figvalue{randomized})}; 
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
       token: 6
        desc: flowchart_blank
       token: 7
        lnum: 
       token: 8
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (random_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2')   `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 *local stop = "stop"
.                                                 *break
.                                         }
147.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
148.                                                 if("$Flowchart_Debug" == "on") {
149.                                                         display "       token: `i'"
150.                                                         display "        desc: ``i''"
151.                                                 }
152.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
153.                                                 if("$Flowchart_Debug" == "on") {
154.                                                         display "       token: `i'"
155.                                                         display "        lnum: ``i''"
156.                                                 }
157.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
158.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
159.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
160.                                                 if("$Flowchart_Debug" == "on") {
161.                                                         display "       token: `i'"
162.                                                         display "        desc: ``i''"
163.                                                 }
164.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
165.                                         if("$Flowchart_Debug" == "on") {
166.                                                 display "   Added to Block - Line `k': "
167.                                         }
168.                                         if(`k' == 1) {
169.                                                 if(trim("``ilookahead''") == ",") {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
171.                                                 }
172.                                                 else {
173.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
174.                                                 }
175.                                         }
176.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
177.                                                 local ilookaheadx2 = `ilookahead' + 1
178.                                                         if("$Flowchart_Debug" == "on") {
179.                                                                 display "Look Ahead x 1: ``ilookahead''"
180.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
181.                                                         }
182.                                                 if(trim("``ilookahead''") == "") {
183.                                                         if("$Flowchart_Debug" == "on") {
184.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
185.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
186.                                                         }
187.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
188.                                                 }
189.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
190.                                                         if("$Flowchart_Debug" == "on") {
191.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
192.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
193.                                                         }
194.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
195.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
196.                                                                 if("$Flowchart_Debug" == "on") {
197.                                                                         display "BREAK"
198.                                                                 }
199.                                                                 local stop = "stop"
200.                                                                 local i = `i' + 1
201.                                                                 continue, break 
202.                                                         }
203.                                                 }
204.                                                 else {
205.                                                         if("$Flowchart_Debug" == "on") {
206.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
207.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
208.                                                         }
209.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
210.                                                 }
211.                                         }
212.                                         else {
213.                                                         if("$Flowchart_Debug" == "on") {
214.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
215.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
216.                                                         }
217.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
218.                                         }
219.                                         if("$Flowchart_Debug" == "on") {
220.                                                 display " ---- END OF LINE"
221.                                                 display ""
222.                                         }
223.                                         local k = `k' + 1
224.                                         local i = `i' + 1
225.                                         local ilookahead = `ilookahead' + 3
226.                                         if("$Flowchart_Debug" == "on") {
227.                                                 display `"                      LA: ``ilookahead'' "'
228.                                         }
229.                                         if(trim("``i''") == "," | "``i''" == "") {
230.                                                 local blockparse = "left"
231.                                                 local stop = "stop"
232.                                         }
233.                                                 
.                                 } // elihw: End of LineWhileLoop
234.         
. if("$Flowchart_Debug" == "on") {
235.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
236. }
237.                                 local i = `i' + 1
238.                         } // elihw: End of TokenWhile
239.                 } // fi: End of Writerow
240.         } // fi: End of SyntaxCmdElse
241. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. 
. * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
. *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
. *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
. *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
. *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
. *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
. *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
. *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
. *               will not compile the TikZ picture.
. flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(enrollment):
Subcommand with Parameter:  writerow(enrollment)
Compound Quotes (CQ's):           "referred" 173 "Referred",         "referred_excluded" 17 "Excluded"         "referred_excluded_nopartic" 9 "a) Did not wish to participate"         "referred_excluded_noshow" 5 "b) Did not show for interview"         "re
> ferred_excluded_other" 3 "c) Other reasons"
Subparameter via String Parse (CQs):  enrollment
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: referred


 Compound Quotes (CQ's):   173 "Referred",         "referred_excluded" 17 "Excluded"         "referred_excluded_nopartic" 9 "a) Did not wish to participate"         "referred_excluded_noshow" 5 "b) Did not show for interview"         "referred_excluded_ot
> her" 3 "c) Other reasons"

 Entire Statement (With CQ's):          "referred" 173 "Referred",         "referred_excluded" 17 "Excluded"         "referred_excluded_nopartic" 9 "a) Did not wish to participate"         "referred_excluded_noshow" 5 "b) Did not show for interview"      
>    "referred_excluded_other" 3 "c) Other reasons"

TOKENS:

1=|      % Row - enrollment|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(enrollment):
BLOCK START ----         [blockparse: center]
2: referred
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: referred
       token: 3
        lnum: 173
       token: 4
        desc: Referred
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (enrollment_center) { Referred (n=\figvalue{referred})}; 
 ---- END OF LINE

                      LA: Excluded 
1=|      %  Debug - End block for row: enrollment|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: referred_excluded
          [blockparse: left]
                      LA: referred_excluded_nopartic 
 ---- NEW LINE
       token: 6
        desc: referred_excluded
       token: 7
        lnum: 17
       token: 8
        desc: Excluded
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (enrollment_left) { Excluded (n=\figvalue{referred_excluded}): \\
 ---- END OF LINE

                      LA: referred_excluded_noshow 
 ---- NEW LINE
       token: 9
        desc: referred_excluded_nopartic
       token: 10
        lnum: 9
       token: 11
        desc: a) Did not wish to participate
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 11] [ token: a) Did not wish to participate] [ k: 2]
Blockfield Linestring:         \h a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
 ---- END OF LINE

                      LA: referred_excluded_other 
 ---- NEW LINE
       token: 12
        desc: referred_excluded_noshow
       token: 13
        lnum: 5
       token: 14
        desc: b) Did not show for interview
   Added to Block - Line 3: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 14] [ token: b) Did not show for interview] [ k: 3]
Blockfield Linestring:         \h b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 15
        desc: referred_excluded_other
       token: 16
        lnum: 3
       token: 17
        desc: c) Other reasons
   Added to Block - Line 4: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 17] [ token: c) Other reasons] [ k: 4]
Blockfield Linestring:         \h c) Other reasons (n=\figvalue{referred_excluded_other}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: enrollment|, 2=||, 3=|| indent=||

.         
. flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(assessment):
Subcommand with Parameter:  writerow(assessment)
Compound Quotes (CQ's):           "assessed" 156 "{Assessed for Eligibility",         "assessed_excluded" 54 "Excluded"         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met"         "assessed_excluded_exclusioncritmet" 13 "b) E
> xclusion criteria met"         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group"         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention"         "assessed_excluded_othertx" 3 "e) Sought other treatment"         "as
> sessed_excluded_other" 7 "f) Other reasons"
Subparameter via String Parse (CQs):  assessment
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: assessed


 Compound Quotes (CQ's):   156 "{Assessed for Eligibility",         "assessed_excluded" 54 "Excluded"         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met"         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria 
> met"         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group"         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention"         "assessed_excluded_othertx" 3 "e) Sought other treatment"         "assessed_excluded_ot
> her" 7 "f) Other reasons"

 Entire Statement (With CQ's):          "assessed" 156 "{Assessed for Eligibility",         "assessed_excluded" 54 "Excluded"         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met"         "assessed_excluded_exclusioncritmet" 13
>  "b) Exclusion criteria met"         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group"         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention"         "assessed_excluded_othertx" 3 "e) Sought other treatment"      
>    "assessed_excluded_other" 7 "f) Other reasons"

TOKENS:

1=|      % Row - assessment|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(assessment):
BLOCK START ----         [blockparse: center]
2: assessed
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: assessed
       token: 3
        lnum: 156
       token: 4
        desc: {Assessed for Eligibility
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (assessment_center) { {Assessed for Eligibility (n=\figvalue{assessed})}; 
 ---- END OF LINE

                      LA: Excluded 
1=|      %  Debug - End block for row: assessment|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: assessed_excluded
          [blockparse: left]
                      LA: assessed_excluded_inclusioncritunmet 
 ---- NEW LINE
       token: 6
        desc: assessed_excluded
       token: 7
        lnum: 54
       token: 8
        desc: Excluded
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (assessment_left) { Excluded (n=\figvalue{assessed_excluded}): \\
 ---- END OF LINE

                      LA: assessed_excluded_exclusioncritmet 
 ---- NEW LINE
       token: 9
        desc: assessed_excluded_inclusioncritunmet
       token: 10
        lnum: 22
       token: 11
        desc: a) Inclusion criteria not met
   Added to Block - Line 2: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 11] [ token: a) Inclusion criteria not met] [ k: 2]
Blockfield Linestring:         \h a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
 ---- END OF LINE

                      LA: assessed_excluded_unsuitedgroup 
 ---- NEW LINE
       token: 12
        desc: assessed_excluded_exclusioncritmet
       token: 13
        lnum: 13
       token: 14
        desc: b) Exclusion criteria met
   Added to Block - Line 3: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 14] [ token: b) Exclusion criteria met] [ k: 3]
Blockfield Linestring:         \h b) Exclusion criteria met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
 ---- END OF LINE

                      LA: assessed_excluded_unsuitedtx 
 ---- NEW LINE
       token: 15
        desc: assessed_excluded_unsuitedgroup
       token: 16
        lnum: 7
       token: 17
        desc: c) Not suited for waitlist group
   Added to Block - Line 4: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 17] [ token: c) Not suited for waitlist group] [ k: 4]
Blockfield Linestring:         \h c) Not suited for waitlist group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
 ---- END OF LINE

                      LA: assessed_excluded_othertx 
 ---- NEW LINE
       token: 18
        desc: assessed_excluded_unsuitedtx
       token: 19
        lnum: 2
       token: 20
        desc: d) Not suited for intervention
   Added to Block - Line 5: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 20] [ token: d) Not suited for intervention] [ k: 5]
Blockfield Linestring:         \h d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
 ---- END OF LINE

                      LA: assessed_excluded_other 
 ---- NEW LINE
       token: 21
        desc: assessed_excluded_othertx
       token: 22
        lnum: 3
       token: 23
        desc: e) Sought other treatment
   Added to Block - Line 6: 
...--- Same Row, End of Line: tdwriteline - [content] 
      [blockparse: left] [ i#: 23] [ token: e) Sought other treatment] [ k: 6]
Blockfield Linestring:         \h e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
 ---- END OF LINE

                      LA:  
 ---- NEW LINE
       token: 24
        desc: assessed_excluded_other
       token: 25
        lnum: 7
       token: 26
        desc: f) Other reasons
   Added to Block - Line 7: 
Look Ahead x 1: 
Look Ahead x 2: 
       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]
      [blockparse: left] [ i#: 26] [ token: f) Other reasons] [ k: 7]
Blockfield Linestring:         \h f) Other reasons (n=\figvalue{assessed_excluded_other}) }; \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: assessment|, 2=||, 3=|| indent=||

.         
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_125202
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:52:02

. 
. flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(random):
Subcommand with Parameter:  writerow(random)
Compound Quotes (CQ's):   "randomized" 102 "Randomized", flowchart_blank
Subparameter via String Parse (CQs):  random
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: randomized


 Compound Quotes (CQ's):   102 "Randomized", flowchart_blank

 Entire Statement (With CQ's):  "randomized" 102 "Randomized", flowchart_blank

TOKENS:

1=|      % Row - random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(random):
BLOCK START ----         [blockparse: center]
2: randomized
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: randomized
       token: 3
        lnum: 102
       token: 4
        desc: Randomized
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (random_center) { Randomized (n=\figvalue{randomized})}; 
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
       token: 6
        desc: flowchart_blank
       token: 7
        lnum: 
       token: 8
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (random_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||

. 
. flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(allocgroup):
Subcommand with Parameter:  writerow(allocgroup)
Compound Quotes (CQ's):           "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
Subparameter via String Parse (CQs):  allocgroup
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: alloc_interventiongroup


 Compound Quotes (CQ's):   51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

 Entire Statement (With CQ's):          "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

TOKENS:

1=|      % Row - allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(allocgroup):
BLOCK START ----         [blockparse: center]
2: alloc_interventiongroup
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: alloc_interventiongroup
       token: 3
        lnum: 51
       token: 4
        desc: {Allocated to Intervention group
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (allocgroup_center) { {Allocated to Intervention group (n=\figvalue{alloc_interventiongroup})}; 
 ---- END OF LINE

                      LA: Allocated to Wait-list control group 
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: alloc_waitlistgroup
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 6
        desc: alloc_waitlistgroup
       token: 7
        lnum: 51
       token: 8
        desc: Allocated to Wait-list control group
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (allocgroup_left) { Allocated to Wait-list control group (n=\figvalue{alloc_waitlistgroup}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||

. flowchart_debug, off    
|||||| DebugLog Off



. flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"

.         
. flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         

. flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"

.         
. flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"

. 
. flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"

.         
. flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"

. 
. 
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. /*
> * DEBUGGING
> * |||||| TEST1: Dummy Row
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST2: Row with No left-block
> flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST3: Row with No right-block
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
> */ 
. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. 
. flowchart connect enrollment_center enrollment_left

. flowchart connect enrollment_center assessment_center

. flowchart connect assessment_center assessment_left

. flowchart connect assessment_center random_center

. flowchart connect random_center allocgroup_center

. flowchart connect random_center allocgroup_left, arrow(angled)

. flowchart connect allocgroup_center allocdetails_center

. flowchart connect allocgroup_left allocdetails_left

. flowchart connect allocdetails_center postmeasurement_center

. flowchart connect allocdetails_left postmeasurement_left

. flowchart connect postmeasurement_center measurement3monpostint_center

. flowchart connect measurement3monpostint_center analyzed_center

. flowchart connect postmeasurement_left wlistintervention_left

. flowchart connect wlistintervention_left measurement3monpostint_left

. flowchart connect measurement3monpostint_left wlist3mon_left

. flowchart connect wlist3mon_left analyzed_left 

. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 *local stop = "stop"
.                                                 *break
.                                         }
147.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
148.                                                 if("$Flowchart_Debug" == "on") {
149.                                                         display "       token: `i'"
150.                                                         display "        desc: ``i''"
151.                                                 }
152.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
153.                                                 if("$Flowchart_Debug" == "on") {
154.                                                         display "       token: `i'"
155.                                                         display "        lnum: ``i''"
156.                                                 }
157.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
158.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
159.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
160.                                                 if("$Flowchart_Debug" == "on") {
161.                                                         display "       token: `i'"
162.                                                         display "        desc: ``i''"
163.                                                 }
164.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
165.                                         if("$Flowchart_Debug" == "on") {
166.                                                 display "   Added to Block - Line `k': "
167.                                         }
168.                                         if(`k' == 1) {
169.                                                 if(trim("``ilookahead''") == ",") {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
171.                                                 }
172.                                                 else {
173.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
174.                                                 }
175.                                         }
176.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
177.                                                 local ilookaheadx2 = `ilookahead' + 1
178.                                                         if("$Flowchart_Debug" == "on") {
179.                                                                 display "Look Ahead x 1: ``ilookahead''"
180.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
181.                                                         }
182.                                                 if(trim("``ilookahead''") == "") {
183.                                                         if("$Flowchart_Debug" == "on") {
184.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
185.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
186.                                                         }
187.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
188.                                                 }
189.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
190.                                                         if("$Flowchart_Debug" == "on") {
191.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
192.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
193.                                                         }
194.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
195.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
196.                                                                 if("$Flowchart_Debug" == "on") {
197.                                                                         display "BREAK"
198.                                                                 }
199.                                                                 local stop = "stop"
200.                                                                 local i = `i' + 1
201.                                                                 continue, break 
202.                                                         }
203.                                                 }
204.                                                 else {
205.                                                         if("$Flowchart_Debug" == "on") {
206.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
207.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
208.                                                         }
209.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
210.                                                 }
211.                                         }
212.                                         else {
213.                                                         if("$Flowchart_Debug" == "on") {
214.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
215.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
216.                                                         }
217.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
218.                                         }
219.                                         if("$Flowchart_Debug" == "on") {
220.                                                 display " ---- END OF LINE"
221.                                                 display ""
222.                                         }
223.                                         local k = `k' + 1
224.                                         local i = `i' + 1
225.                                         local ilookahead = `ilookahead' + 3
226.                                         if("$Flowchart_Debug" == "on") {
227.                                                 display `"                      LA: ``ilookahead'' "'
228.                                         }
229.                                         if(trim("``i''") == "," | "``i''" == "") {
230.                                                 local blockparse = "left"
231.                                                 local stop = "stop"
232.                                         }
233.                                                 
.                                 } // elihw: End of LineWhileLoop
234.         
. if("$Flowchart_Debug" == "on") {
235.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
236. }
237.                                 local i = `i' + 1
238.                         } // elihw: End of TokenWhile
239.                 } // fi: End of Writerow
240.         } // fi: End of SyntaxCmdElse
241. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. 
. * Format: flowchart writerow([Name_of_row]): [Block_Center], [Block_Left]
. *       The content within each block should be separated by a single comma (strings within a block can still use a comma, it just has to be within double-quotes).
. *               The first block gets assigned the 'center' orientation and the second gets the 'left' orientation. 
. *               Each block can have several lines, and each line has to have a triplet of 3 fields which should be separated by spaces.
. *               A single line is a triplet of these 3 fields: "variable_name" n "Description of the variable name and number."
. *               Multiple triplets can be separated by a \\\ at the end of the line for readability.
. *       A blank block is a block with no lines or content (which won't be drawn in the final diagram) and should have the special keyword 'flowchart_blank' 
. *               to indicate to the program's interpreter internally that there's no content for that block, otherwise the blocks will misalign and the .tex document 
. *               will not compile the TikZ picture.
. flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"

.         
. flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"

.         
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_125241
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 12:52:41

. 
. flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(random):
Subcommand with Parameter:  writerow(random)
Compound Quotes (CQ's):   "randomized" 102 "Randomized", flowchart_blank
Subparameter via String Parse (CQs):  random
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: randomized


 Compound Quotes (CQ's):   102 "Randomized", flowchart_blank

 Entire Statement (With CQ's):  "randomized" 102 "Randomized", flowchart_blank

TOKENS:

1=|      % Row - random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(random):
BLOCK START ----         [blockparse: center]
2: randomized
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: randomized
       token: 3
        lnum: 102
       token: 4
        desc: Randomized
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (random_center) { Randomized (n=\figvalue{randomized})}; 
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
       token: 6
        desc: flowchart_blank
       token: 7
        lnum: 
       token: 8
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (random_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||

. 
. flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(allocgroup):
Subcommand with Parameter:  writerow(allocgroup)
Compound Quotes (CQ's):           "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
Subparameter via String Parse (CQs):  allocgroup
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: alloc_interventiongroup


 Compound Quotes (CQ's):   51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

 Entire Statement (With CQ's):          "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

TOKENS:

1=|      % Row - allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(allocgroup):
BLOCK START ----         [blockparse: center]
2: alloc_interventiongroup
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: alloc_interventiongroup
       token: 3
        lnum: 51
       token: 4
        desc: {Allocated to Intervention group
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (allocgroup_center) { {Allocated to Intervention group (n=\figvalue{alloc_interventiongroup})}; 
 ---- END OF LINE

                      LA: Allocated to Wait-list control group 
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: alloc_waitlistgroup
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 6
        desc: alloc_waitlistgroup
       token: 7
        lnum: 51
       token: 8
        desc: Allocated to Wait-list control group
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (allocgroup_left) { Allocated to Wait-list control group (n=\figvalue{alloc_waitlistgroup}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||

. flowchart_debug, off    
|||||| DebugLog Off



. flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"

.         
. flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         

. flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"

.         
. flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"

. 
. flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"

.         
. flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"

. 
. 
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. /*
> * DEBUGGING
> * |||||| TEST1: Dummy Row
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST2: Row with No left-block
> flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST3: Row with No right-block
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
> */ 
. 
. * Format: [rowname_center] --> [rowname_left] - Connect a center block to a left block for horizontal arrows across rows.
.         * [rowname_center] --> [rowname_center] - Connect a center block to a center block for vertical across within the same column for blocks in the center.
.         * [rowname_left] --> [rowname_left] - Connect a left block to a left block for vertical across within the same column for blocks on the left.
.         * , angled - This option makes the arrow make a 90 degree angle. Use this across a blank row.
. * Column Orientation: 
. * The sides of the diagram are initially counter-intuitive. Think of it like reading a chest x-ray: when interpreting the x-ray the patient's left is on the right of the page and the patient's right is on the left of the page -- the orientation being
. *       relative to a patient facing out of the plane of the x-ray. Likewise, the column that is immediately to the left of the page as the center column and the column that is immediately to the right of the page is the left column.
. *       Connect each row's block with an underscore and then the column-orientation corresponding to its side in this manner.
. 
. flowchart connect enrollment_center enrollment_left

. flowchart connect enrollment_center assessment_center

. flowchart connect assessment_center assessment_left

. flowchart connect assessment_center random_center

. flowchart connect random_center allocgroup_center

. flowchart connect random_center allocgroup_left, arrow(angled)

. flowchart connect allocgroup_center allocdetails_center

. flowchart connect allocgroup_left allocdetails_left

. flowchart connect allocdetails_center postmeasurement_center

. flowchart connect allocdetails_left postmeasurement_left

. flowchart connect postmeasurement_center measurement3monpostint_center

. flowchart connect measurement3monpostint_center analyzed_center

. flowchart connect postmeasurement_left wlistintervention_left

. flowchart connect wlistintervention_left measurement3monpostint_left

. flowchart connect measurement3monpostint_left wlist3mon_left

. flowchart connect wlist3mon_left analyzed_left 

. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\AppData\Local\Temp\STD02000000.tmp"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 *local stop = "stop"
.                                                 *break
.                                         }
147.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
148.                                                 if("$Flowchart_Debug" == "on") {
149.                                                         display "       token: `i'"
150.                                                         display "        desc: ``i''"
151.                                                 }
152.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
153.                                                 if("$Flowchart_Debug" == "on") {
154.                                                         display "       token: `i'"
155.                                                         display "        lnum: ``i''"
156.                                                 }
157.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
158.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
159.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
160.                                                 if("$Flowchart_Debug" == "on") {
161.                                                         display "       token: `i'"
162.                                                         display "        desc: ``i''"
163.                                                 }
164.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
165.                                         if("$Flowchart_Debug" == "on") {
166.                                                 display "   Added to Block - Line `k': "
167.                                         }
168.                                         if(`k' == 1) {
169.                                                 if(trim("``ilookahead''") == ",") {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
171.                                                 }
172.                                                 else {
173.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
174.                                                 }
175.                                         }
176.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
177.                                                 local ilookaheadx2 = `ilookahead' + 1
178.                                                         if("$Flowchart_Debug" == "on") {
179.                                                                 display "Look Ahead x 1: ``ilookahead''"
180.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
181.                                                         }
182.                                                 if(trim("``ilookahead''") == "") {
183.                                                         if("$Flowchart_Debug" == "on") {
184.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
185.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
186.                                                         }
187.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
188.                                                 }
189.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
190.                                                         if("$Flowchart_Debug" == "on") {
191.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
192.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
193.                                                         }
194.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
195.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
196.                                                                 if("$Flowchart_Debug" == "on") {
197.                                                                         display "BREAK"
198.                                                                 }
199.                                                                 local stop = "stop"
200.                                                                 local i = `i' + 1
201.                                                                 continue, break 
202.                                                         }
203.                                                 }
204.                                                 else {
205.                                                         if("$Flowchart_Debug" == "on") {
206.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
207.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
208.                                                         }
209.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
210.                                                 }
211.                                         }
212.                                         else {
213.                                                         if("$Flowchart_Debug" == "on") {
214.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
215.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
216.                                                         }
217.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
218.                                         }
219.                                         if("$Flowchart_Debug" == "on") {
220.                                                 display " ---- END OF LINE"
221.                                                 display ""
222.                                         }
223.                                         local k = `k' + 1
224.                                         local i = `i' + 1
225.                                         local ilookahead = `ilookahead' + 3
226.                                         if("$Flowchart_Debug" == "on") {
227.                                                 display `"                      LA: ``ilookahead'' "'
228.                                         }
229.                                         if(trim("``i''") == "," | "``i''" == "") {
230.                                                 local blockparse = "left"
231.                                                 local stop = "stop"
232.                                         }
233.                                                 
.                                 } // elihw: End of LineWhileLoop
234.         
. if("$Flowchart_Debug" == "on") {
235.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
236. }
237.                                 local i = `i' + 1
238.                         } // elihw: End of TokenWhile
239.                 } // fi: End of Writerow
240.         } // fi: End of SyntaxCmdElse
241. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"

.         
. flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"

.         
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_131420
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 13:14:20

. 
. flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(random):
Subcommand with Parameter:  writerow(random)
Compound Quotes (CQ's):   "randomized" 102 "Randomized", flowchart_blank
Subparameter via String Parse (CQs):  random
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: randomized


 Compound Quotes (CQ's):   102 "Randomized", flowchart_blank

 Entire Statement (With CQ's):  "randomized" 102 "Randomized", flowchart_blank

TOKENS:

1=|      % Row - random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(random):
BLOCK START ----         [blockparse: center]
2: randomized
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: randomized
       token: 3
        lnum: 102
       token: 4
        desc: Randomized
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (random_center) { Randomized (n=\figvalue{randomized})}; 
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
       token: 6
        desc: flowchart_blank
       token: 7
        lnum: 
       token: 8
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (random_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||

. 
. flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(allocgroup):
Subcommand with Parameter:  writerow(allocgroup)
Compound Quotes (CQ's):           "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
Subparameter via String Parse (CQs):  allocgroup
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: alloc_interventiongroup


 Compound Quotes (CQ's):   51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

 Entire Statement (With CQ's):          "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

TOKENS:

1=|      % Row - allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(allocgroup):
BLOCK START ----         [blockparse: center]
2: alloc_interventiongroup
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: alloc_interventiongroup
       token: 3
        lnum: 51
       token: 4
        desc: {Allocated to Intervention group
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (allocgroup_center) { {Allocated to Intervention group (n=\figvalue{alloc_interventiongroup})}; 
 ---- END OF LINE

                      LA: Allocated to Wait-list control group 
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: alloc_waitlistgroup
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 6
        desc: alloc_waitlistgroup
       token: 7
        lnum: 51
       token: 8
        desc: Allocated to Wait-list control group
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (allocgroup_left) { Allocated to Wait-list control group (n=\figvalue{alloc_waitlistgroup}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||

. flowchart_debug, off    
|||||| DebugLog Off



. flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"

.         
. flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         

. flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"

.         
. flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"

. 
. flowchart writerow(wlist3mon): flowchart_blankblock, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"

.         
. flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"

. 
. 
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. /*
> * DEBUGGING
> * |||||| TEST1: Dummy Row
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST2: Row with No left-block
> flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST3: Row with No right-block
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
> */ 
. 
. 
. flowchart connect enrollment_center enrollment_left

. flowchart connect enrollment_center assessment_center

. flowchart connect assessment_center assessment_left

. flowchart connect assessment_center random_center

. flowchart connect random_center allocgroup_center

. flowchart connect random_center allocgroup_left, arrow(angled)

. flowchart connect allocgroup_center allocdetails_center

. flowchart connect allocgroup_left allocdetails_left

. flowchart connect allocdetails_center postmeasurement_center

. flowchart connect allocdetails_left postmeasurement_left

. flowchart connect postmeasurement_center measurement3monpostint_center

. flowchart connect measurement3monpostint_center analyzed_center

. flowchart connect postmeasurement_left wlistintervention_left

. flowchart connect wlistintervention_left measurement3monpostint_left

. flowchart connect measurement3monpostint_left wlist3mon_left

. flowchart connect wlist3mon_left analyzed_left 

. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 *local stop = "stop"
.                                                 *break
.                                         }
147.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
148.                                                 if("$Flowchart_Debug" == "on") {
149.                                                         display "       token: `i'"
150.                                                         display "        desc: ``i''"
151.                                                 }
152.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
153.                                                 if("$Flowchart_Debug" == "on") {
154.                                                         display "       token: `i'"
155.                                                         display "        lnum: ``i''"
156.                                                 }
157.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
158.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
159.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
160.                                                 if("$Flowchart_Debug" == "on") {
161.                                                         display "       token: `i'"
162.                                                         display "        desc: ``i''"
163.                                                 }
164.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
165.                                         if("$Flowchart_Debug" == "on") {
166.                                                 display "   Added to Block - Line `k': "
167.                                         }
168.                                         if(`k' == 1) {
169.                                                 if(trim("``ilookahead''") == ",") {
170.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
171.                                                 }
172.                                                 else {
173.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
174.                                                 }
175.                                         }
176.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
177.                                                 local ilookaheadx2 = `ilookahead' + 1
178.                                                         if("$Flowchart_Debug" == "on") {
179.                                                                 display "Look Ahead x 1: ``ilookahead''"
180.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
181.                                                         }
182.                                                 if(trim("``ilookahead''") == "") {
183.                                                         if("$Flowchart_Debug" == "on") {
184.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
185.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
186.                                                         }
187.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
188.                                                 }
189.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
190.                                                         if("$Flowchart_Debug" == "on") {
191.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
192.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
193.                                                         }
194.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
195.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
196.                                                                 if("$Flowchart_Debug" == "on") {
197.                                                                         display "BREAK"
198.                                                                 }
199.                                                                 local stop = "stop"
200.                                                                 local i = `i' + 1
201.                                                                 continue, break 
202.                                                         }
203.                                                 }
204.                                                 else {
205.                                                         if("$Flowchart_Debug" == "on") {
206.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
207.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
208.                                                         }
209.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
210.                                                 }
211.                                         }
212.                                         else {
213.                                                         if("$Flowchart_Debug" == "on") {
214.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
215.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
216.                                                         }
217.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
218.                                         }
219.                                         if("$Flowchart_Debug" == "on") {
220.                                                 display " ---- END OF LINE"
221.                                                 display ""
222.                                         }
223.                                         local k = `k' + 1
224.                                         local i = `i' + 1
225.                                         local ilookahead = `ilookahead' + 3
226.                                         if("$Flowchart_Debug" == "on") {
227.                                                 display `"                      LA: ``ilookahead'' "'
228.                                         }
229.                                         if(trim("``i''") == "," | "``i''" == "") {
230.                                                 local blockparse = "left"
231.                                                 local stop = "stop"
232.                                         }
233.                                                 
.                                 } // elihw: End of LineWhileLoop
234.         
. if("$Flowchart_Debug" == "on") {
235.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
236. }
237.                                 local i = `i' + 1
238.                         } // elihw: End of TokenWhile
239.                 } // fi: End of Writerow
240.         } // fi: End of SyntaxCmdElse
241. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"

.         
. flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"

.         
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_131458
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 13:14:58

. 
. flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(random):
Subcommand with Parameter:  writerow(random)
Compound Quotes (CQ's):   "randomized" 102 "Randomized", flowchart_blank
Subparameter via String Parse (CQs):  random
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: randomized


 Compound Quotes (CQ's):   102 "Randomized", flowchart_blank

 Entire Statement (With CQ's):  "randomized" 102 "Randomized", flowchart_blank

TOKENS:

1=|      % Row - random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(random):
BLOCK START ----         [blockparse: center]
2: randomized
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: randomized
       token: 3
        lnum: 102
       token: 4
        desc: Randomized
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (random_center) { Randomized (n=\figvalue{randomized})}; 
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
       token: 6
        desc: flowchart_blank
       token: 7
        lnum: 
       token: 8
        desc: 
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (random_left) {  (n=\figvalue{flowchart_blank}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||

. 
. flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(allocgroup):
Subcommand with Parameter:  writerow(allocgroup)
Compound Quotes (CQ's):           "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
Subparameter via String Parse (CQs):  allocgroup
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: alloc_interventiongroup


 Compound Quotes (CQ's):   51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

 Entire Statement (With CQ's):          "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

TOKENS:

1=|      % Row - allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(allocgroup):
BLOCK START ----         [blockparse: center]
2: alloc_interventiongroup
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: alloc_interventiongroup
       token: 3
        lnum: 51
       token: 4
        desc: {Allocated to Intervention group
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (allocgroup_center) { {Allocated to Intervention group (n=\figvalue{alloc_interventiongroup})}; 
 ---- END OF LINE

                      LA: Allocated to Wait-list control group 
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: alloc_waitlistgroup
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 6
        desc: alloc_waitlistgroup
       token: 7
        lnum: 51
       token: 8
        desc: Allocated to Wait-list control group
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (allocgroup_left) { Allocated to Wait-list control group (n=\figvalue{alloc_waitlistgroup}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||

. flowchart_debug, off    
|||||| DebugLog Off



. flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"

.         
. flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         

. flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"

.         
. flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"

. 
. flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"

.         
. flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"

. 
. 
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. /*
> * DEBUGGING
> * |||||| TEST1: Dummy Row
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST2: Row with No left-block
> flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST3: Row with No right-block
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
> */ 
. 
. 
. flowchart connect enrollment_center enrollment_left

. flowchart connect enrollment_center assessment_center

. flowchart connect assessment_center assessment_left

. flowchart connect assessment_center random_center

. flowchart connect random_center allocgroup_center

. flowchart connect random_center allocgroup_left, arrow(angled)

. flowchart connect allocgroup_center allocdetails_center

. flowchart connect allocgroup_left allocdetails_left

. flowchart connect allocdetails_center postmeasurement_center

. flowchart connect allocdetails_left postmeasurement_left

. flowchart connect postmeasurement_center measurement3monpostint_center

. flowchart connect measurement3monpostint_center analyzed_center

. flowchart connect postmeasurement_left wlistintervention_left

. flowchart connect wlistintervention_left measurement3monpostint_left

. flowchart connect measurement3monpostint_left wlist3mon_left

. flowchart connect wlist3mon_left analyzed_left 

. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. capture program drop flowchart

. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 local stop = "stop"
147.                                                 continue, break
148.                                         }
149.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
150.                                                 if("$Flowchart_Debug" == "on") {
151.                                                         display "       token: `i'"
152.                                                         display "        desc: ``i''"
153.                                                 }
154.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
155.                                                 if("$Flowchart_Debug" == "on") {
156.                                                         display "       token: `i'"
157.                                                         display "        lnum: ``i''"
158.                                                 }
159.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
160.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
161.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
162.                                                 if("$Flowchart_Debug" == "on") {
163.                                                         display "       token: `i'"
164.                                                         display "        desc: ``i''"
165.                                                 }
166.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
167.                                         if("$Flowchart_Debug" == "on") {
168.                                                 display "   Added to Block - Line `k': "
169.                                         }
170.                                         if(`k' == 1) {
171.                                                 if(trim("``ilookahead''") == ",") {
172.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
173.                                                 }
174.                                                 else {
175.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
176.                                                 }
177.                                         }
178.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
179.                                                 local ilookaheadx2 = `ilookahead' + 1
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "Look Ahead x 1: ``ilookahead''"
182.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
183.                                                         }
184.                                                 if(trim("``ilookahead''") == "") {
185.                                                         if("$Flowchart_Debug" == "on") {
186.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
187.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
188.                                                         }
189.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
190.                                                 }
191.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
192.                                                         if("$Flowchart_Debug" == "on") {
193.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
194.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
195.                                                         }
196.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
197.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
198.                                                                 if("$Flowchart_Debug" == "on") {
199.                                                                         display "BREAK"
200.                                                                 }
201.                                                                 local stop = "stop"
202.                                                                 local i = `i' + 1
203.                                                                 continue, break 
204.                                                         }
205.                                                 }
206.                                                 else {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
212.                                                 }
213.                                         }
214.                                         else {
215.                                                         if("$Flowchart_Debug" == "on") {
216.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
217.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
218.                                                         }
219.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
220.                                         }
221.                                         if("$Flowchart_Debug" == "on") {
222.                                                 display " ---- END OF LINE"
223.                                                 display ""
224.                                         }
225.                                         local k = `k' + 1
226.                                         local i = `i' + 1
227.                                         local ilookahead = `ilookahead' + 3
228.                                         if("$Flowchart_Debug" == "on") {
229.                                                 display `"                      LA: ``ilookahead'' "'
230.                                         }
231.                                         if(trim("``i''") == "," | "``i''" == "") {
232.                                                 local blockparse = "left"
233.                                                 local stop = "stop"
234.                                         }
235.                                                 
.                                 } // elihw: End of LineWhileLoop
236.         
. if("$Flowchart_Debug" == "on") {
237.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
238. }
239.                                 local i = `i' + 1
240.                         } // elihw: End of TokenWhile
241.                 } // fi: End of Writerow
242.         } // fi: End of SyntaxCmdElse
243. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"

.         
. flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"

.         
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_132743
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 13:27:43

. 
. flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(random):
Subcommand with Parameter:  writerow(random)
Compound Quotes (CQ's):   "randomized" 102 "Randomized", flowchart_blank
Subparameter via String Parse (CQs):  random
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: randomized


 Compound Quotes (CQ's):   102 "Randomized", flowchart_blank

 Entire Statement (With CQ's):  "randomized" 102 "Randomized", flowchart_blank

TOKENS:

1=|      % Row - random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(random):
BLOCK START ----         [blockparse: center]
2: randomized
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: randomized
       token: 3
        lnum: 102
       token: 4
        desc: Randomized
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (random_center) { Randomized (n=\figvalue{randomized})}; 
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  Debug - End block for row: random|, 2=||, 3=|| indent=||

. 
. flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(allocgroup):
Subcommand with Parameter:  writerow(allocgroup)
Compound Quotes (CQ's):           "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
Subparameter via String Parse (CQs):  allocgroup
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: alloc_interventiongroup


 Compound Quotes (CQ's):   51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

 Entire Statement (With CQ's):          "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

TOKENS:

1=|      % Row - allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(allocgroup):
BLOCK START ----         [blockparse: center]
2: alloc_interventiongroup
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: alloc_interventiongroup
       token: 3
        lnum: 51
       token: 4
        desc: {Allocated to Intervention group
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (allocgroup_center) { {Allocated to Intervention group (n=\figvalue{alloc_interventiongroup})}; 
 ---- END OF LINE

                      LA: Allocated to Wait-list control group 
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: alloc_waitlistgroup
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 6
        desc: alloc_waitlistgroup
       token: 7
        lnum: 51
       token: 8
        desc: Allocated to Wait-list control group
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (allocgroup_left) { Allocated to Wait-list control group (n=\figvalue{alloc_waitlistgroup}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: allocgroup|, 2=||, 3=|| indent=||

. flowchart_debug, off    
|||||| DebugLog Off



. flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"

.         
. flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         

. flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"

.         
. flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"

. 
. flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"

.         
. flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"

. 
. 
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. /*
> * DEBUGGING
> * |||||| TEST1: Dummy Row
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST2: Row with No left-block
> flowchart writerow(rowname): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST3: Row with No right-block
> flowchart writerow(rowname): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
> */ 
. 
. 
. flowchart connect enrollment_center enrollment_left

. flowchart connect enrollment_center assessment_center

. flowchart connect assessment_center assessment_left

. flowchart connect assessment_center random_center

. flowchart connect random_center allocgroup_center

. flowchart connect random_center allocgroup_left, arrow(angled)

. flowchart connect allocgroup_center allocdetails_center

. flowchart connect allocgroup_left allocdetails_left

. flowchart connect allocdetails_center postmeasurement_center

. flowchart connect allocdetails_left postmeasurement_left

. flowchart connect postmeasurement_center measurement3monpostint_center

. flowchart connect measurement3monpostint_center analyzed_center

. flowchart connect postmeasurement_left wlistintervention_left

. flowchart connect wlistintervention_left measurement3monpostint_left

. flowchart connect measurement3monpostint_left wlist3mon_left

. flowchart connect wlist3mon_left analyzed_left 

. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. 
. 
. 
. 
. 
. Trajectory: Issue: singleton blocks with a blank row cause row misalignments. Added tests 4 and 5 to test singleton rows with a flowchart_blank, for the left and right block. Also added flowchart connects for tests 1-5 to generate a test .tex file. Traj
> ectory: fix singelton with a blank row issue
unrecognized command:  Trajectory
r(199);

. 
. 
. * Trajectory: Issue: singleton blocks with a blank row cause row misalignments. Added tests 4 and 5 to test singleton rows with a flowchart_blank, for the left and right block. Also added flowchart connects for tests 1-5 to generate a test .tex file. Tr
> ajectory: fix singelton with a blank row issue

. 
. 
. 
. 
. 
. 
. exit, clear
----------------------------------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Log\tdcommands_log_07-31-2017.log
  log type:  text
 opened on:  31 Jul 2017, 14:41:20

. 
. 
. 
. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures 
> the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand
> .
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithpa
> ram'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subpar
> am):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Tok
> en
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to
>  the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flo
> wchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), swi
> tch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111.                                         local i = `i' + 1       // Move to the next token after the loop continues.
112.                                         continue
113.                                 }
114.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Retu
> rns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
115.                                 if("$Flowchart_Debug" == "on") {
116.                                         display `"          [blockparse: `blockparse']"'
117.                                         display `"                      LA: ``ilookahead'' "'
118.                                 }
119.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the 
> start.
.                                 if("`blockparse'" == "center") {
120.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
121.                                 } // fi: End of BlockParse
122.                                 else if("`blockparse'" == "left") {
123.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
124.                                 } // fi: End of BlockParse
125.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the bloc
> k is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-line, which is the only line
>  in the block.
126.                                 local stop = ""
127.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop
> ' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
128.                                         if("$Flowchart_Debug" == "on") {
129.                                                 display " ---- NEW LINE"
130.                                         }
131.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "
> flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
132.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the bl
> ock is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce a blank line '& \\' charac
> ter.)
.                                                 if("$Flowchart_Debug" == "on") {
133.                                                         display " --- "
134.                                                         display " --- Blank First Row --- "
135.                                                         display " ---   Switching to parse the next block."
136.                                                         display " --- "
137.                                                 }
138.                                                 local blockparse = "left"
139.                                                 local stop = "stop"
140.                                                 break
141.                                         }
142.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
143.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k
> : `k']"
144.                                         }
145.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
146.                                                 local stop = "stop"
147.                                                 continue, break
148.                                         }
149.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is 
> also the variable_name.
150.                                                 if("$Flowchart_Debug" == "on") {
151.                                                         display "       token: `i'"
152.                                                         display "        desc: ``i''"
153.                                                 }
154.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
155.                                                 if("$Flowchart_Debug" == "on") {
156.                                                         display "       token: `i'"
157.                                                         display "        lnum: ``i''"
158.                                                 }
159.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number,
>  variable_value, the (n=#).
160.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the li
> ne's name, with the line-name as 
161.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the d
> elimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
162.                                                 if("$Flowchart_Debug" == "on") {
163.                                                         display "       token: `i'"
164.                                                         display "        desc: ``i''"
165.                                                 }
166.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence
> .
167.                                         if("$Flowchart_Debug" == "on") {
168.                                                 display "   Added to Block - Line `k': "
169.                                         }
170.                                         if(`k' == 1) {
171.                                                 if(trim("``ilookahead''") == ",") {
172.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"') singleton
173.                                                 }
174.                                                 else {
175.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') lead(`"`blockparsetoken'"')
176.                                                 }
177.                                         }
178.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "f
> lowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
179.                                                 local ilookaheadx2 = `ilookahead' + 1
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "Look Ahead x 1: ``ilookahead''"
182.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
183.                                                         }
184.                                                 if(trim("``ilookahead''") == "") {
185.                                                         if("$Flowchart_Debug" == "on") {
186.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - 
> [content] [newrow] [end]"
187.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
188.                                                         }
189.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end
190.                                                 }
191.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("`
> `ilookaheadx2''")) == "flowchart_blank" ) {
192.                                                         if("$Flowchart_Debug" == "on") {
193.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline 
> - [content] [newrow] [end] [endblank]"
194.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
195.                                                         }
196.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') newrow end endblank
197.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop pars
> ing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
198.                                                                 if("$Flowchart_Debug" == "on") {
199.                                                                         display "BREAK"
200.                                                                 }
201.                                                                 local stop = "stop"
202.                                                                 local i = `i' + 1
203.                                                                 continue, break 
204.                                                         }
205.                                                 }
206.                                                 else {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"
> ') end
212.                                                 }
213.                                         }
214.                                         else {
215.                                                         if("$Flowchart_Debug" == "on") {
216.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
217.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k:
>  `k']"
218.                                                         }
219.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
220.                                         }
221.                                         if("$Flowchart_Debug" == "on") {
222.                                                 display " ---- END OF LINE"
223.                                                 display ""
224.                                         }
225.                                         local k = `k' + 1
226.                                         local i = `i' + 1
227.                                         local ilookahead = `ilookahead' + 3
228.                                         if("$Flowchart_Debug" == "on") {
229.                                                 display `"                      LA: ``ilookahead'' "'
230.                                         }
231.                                         if(trim("``i''") == "," | "``i''" == "") {
232.                                                 local blockparse = "left"
233.                                                 local stop = "stop"
234.                                         }
235.                                                 
.                                 } // elihw: End of LineWhileLoop
236.         
. if("$Flowchart_Debug" == "on") {
237.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
238. }
239.                                 local i = `i' + 1
240.                         } // elihw: End of TokenWhile
241.                 } // fi: End of Writerow
242.         } // fi: End of SyntaxCmdElse
243. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned o
> ff), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace 
> the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdo
> c.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis 
> Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \
> \ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block
> " "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is
>  another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another li
> ne, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block
> " "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_144126
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 14:41:26

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

. 
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_center rownametest4_center

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. set more off

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % Blank Center Block"'     // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
174.                                                 }
175.                                                 else {
176.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
177.                                                 }
178.                                         }
179.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
180.                                                 local ilookaheadx2 = `ilookahead' + 1
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "Look Ahead x 1: ``ilookahead''"
183.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
184.                                                         }
185.                                                 if(trim("``ilookahead''") == "") {
186.                                                         if("$Flowchart_Debug" == "on") {
187.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
188.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
191.                                                 }
192.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
193.                                                         if("$Flowchart_Debug" == "on") {
194.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
195.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
196.                                                         }
197.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
198.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
199.                                                                 if("$Flowchart_Debug" == "on") {
200.                                                                         display "BREAK"
201.                                                                 }
202.                                                                 local stop = "stop"
203.                                                                 local i = `i' + 1
204.                                                                 continue, break 
205.                                                         }
206.                                                 }
207.                                                 else {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
213.                                                 }
214.                                         }
215.                                         else {
216.                                                         if("$Flowchart_Debug" == "on") {
217.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
218.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
219.                                                         }
220.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
221.                                         }
222.                                         if("$Flowchart_Debug" == "on") {
223.                                                 display " ---- END OF LINE"
224.                                                 display ""
225.                                         }
226.                                         local k = `k' + 1
227.                                         local i = `i' + 1
228.                                         local ilookahead = `ilookahead' + 3
229.                                         if("$Flowchart_Debug" == "on") {
230.                                                 display `"                      LA: ``ilookahead'' "'
231.                                         }
232.                                         if(trim("``i''") == "," | "``i''" == "") {
233.                                                 local blockparse = "left"
234.                                                 local stop = "stop"
235.                                         }
236.                                                 
.                                 } // elihw: End of LineWhileLoop
237.         
. if("$Flowchart_Debug" == "on") {
238.         flowchart_tdwrite_blockfield `"      %  Debug - End block for row: `subparam'"' // End of the Row
239. }
240.                                 local i = `i' + 1
241.                         } // elihw: End of TokenWhile
242.                 } // fi: End of Writerow
243.         } // fi: End of SyntaxCmdElse
244. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_144537
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 14:45:37

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1}): \\
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

. 
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_center rownametest4_center

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
188.                                                 }
189.                                         }
190.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
191.                                                 local ilookaheadx2 = `ilookahead' + 1
192.                                                         if("$Flowchart_Debug" == "on") {
193.                                                                 display "Look Ahead x 1: ``ilookahead''"
194.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
195.                                                         }
196.                                                 if(trim("``ilookahead''") == "") {
197.                                                         if("$Flowchart_Debug" == "on") {
198.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
199.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
200.                                                         }
201.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
202.                                                 }
203.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
204.                                                         if("$Flowchart_Debug" == "on") {
205.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
206.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
207.                                                         }
208.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
209.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
210.                                                                 if("$Flowchart_Debug" == "on") {
211.                                                                         display "BREAK"
212.                                                                 }
213.                                                                 local stop = "stop"
214.                                                                 local i = `i' + 1
215.                                                                 continue, break 
216.                                                         }
217.                                                 }
218.                                                 else {
219.                                                         if("$Flowchart_Debug" == "on") {
220.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
221.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
222.                                                         }
223.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
224.                                                 }
225.                                         }
226.                                         else {
227.                                                         if("$Flowchart_Debug" == "on") {
228.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
229.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
230.                                                         }
231.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
232.                                         }
233.                                         if("$Flowchart_Debug" == "on") {
234.                                                 display " ---- END OF LINE"
235.                                                 display ""
236.                                         }
237.                                         local k = `k' + 1
238.                                         local i = `i' + 1
239.                                         local ilookahead = `ilookahead' + 3
240.                                         if("$Flowchart_Debug" == "on") {
241.                                                 display `"                      LA: ``ilookahead'' "'
242.                                         }
243.                                         if(trim("``i''") == "," | "``i''" == "") {
244.                                                 local blockparse = "left"
245.                                                 local stop = "stop"
246.                                         }
247.                                                 
.                                 } // elihw: End of LineWhileLoop
248.         
. if("$Flowchart_Debug" == "on") {
249.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
250. }
251.                                 local i = `i' + 1
252.                         } // elihw: End of TokenWhile
253.                 } // fi: End of Writerow
254.         } // fi: End of SyntaxCmdElse
255. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_151435
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 15:14:35

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

. 
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_center rownametest4_center

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "on") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_151834
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 15:18:34

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

. 
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_center rownametest4_center

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                         display "&^&^&^&^&^&^&^&^&"
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "on") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
&^&^&^&^&^&^&^&^&
&^&^&^&^&^&^&^&^&

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
&^&^&^&^&^&^&^&^&

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
&^&^&^&^&^&^&^&^&

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_152110
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 15:21:10

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

. 
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_center rownametest4_center

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                         display "&^&^&^&^&^&^&^&^&"
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "on") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
&^&^&^&^&^&^&^&^&
&^&^&^&^&^&^&^&^&

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"
&^&^&^&^&^&^&^&^&

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
&^&^&^&^&^&^&^&^&

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_152220
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 15:22:20

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

. 
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_center rownametest4_center

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                         display "&^&^&^&^&^&^&^&^&"
186.                                                 }
187.                                                 else {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "on") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_152329
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 15:23:29

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
&^&^&^&^&^&^&^&^&
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

. 
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_center rownametest4_center

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "on") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, off
|||||| DebugLog Off



. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

. 
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_center rownametest4_center

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "on") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, "rblock1_line1" 97 "This is one line, of a block." "rblock1_line2" 33 "This is another line, of a block" "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." "lblock1_line2" 43 "This is another line, of a block" "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, off
|||||| DebugLog Off



. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

. 
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\AppData\Local\Temp\STD02000000.tmp"

.                                                         display "Isaac Test 13523523"
Isaac Test 13523523

. 
end of do-file

. do "C:\Users\Krist\AppData\Local\Temp\STD02000000.tmp"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                         display "Isaac Test 13523523"
186.                                                 }
187.                                                 else {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "on") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, off
|||||| DebugLog Off



. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Isaac Test 13523523

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\AppData\Local\Temp\STD02000000.tmp"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                         display "Isaac Test 13523523"
186.                                                 }
187.                                                 else {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "on") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, off
|||||| DebugLog Off



. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Isaac Test 13523523

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                                 display "Isaac Test 13523523"
178.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
179.                                                 }
180.                                                 else if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
186.                                                 }
187.                                                 else {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "on") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, off
|||||| DebugLog Off



. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Isaac Test 13523523

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. macro drop _all

. log close DebugLog
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 closed on:  31 Jul 2017, 15:59:42
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

. log query DebugLog
log DebugLog not found
r(111);

. do "C:\Users\Krist\AppData\Local\Temp\STD02000000.tmp"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "on") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, off
|||||| DebugLog Off



. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "on") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_160052
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:00:52

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                                 display "Isaac Test 13523523"
178.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
179.                                                 }
180.                                                 else if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
186.                                                 }
187.                                                 else {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "on") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_160214
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:02:14

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Isaac Test 13523523
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "on") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else {
 27.                 global Flowchart_Debug = "off"
 28.                 capture log close DebugLog
 29.         }
 30. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_160850
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:08:50

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest4|, 2=||, 3=|| indent=||

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      %  +- Debug - End block for row: rownametest5|, 2=||, 3=|| indent=||

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "tikz") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off tikz]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else if("`tikz'" == "tikz") {
 27.                 global Flowchart_Debug = "tikz"
 28.                 display "|||||| DebugLog Mode: Tikz"
 29.                 display ""
 30.                 display ""
 31.         }
 32.         else {
 33.                 global Flowchart_Debug = "off"
 34.                 capture log close DebugLog
 35.         }
 36. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_161310
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:13:10

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "tikz") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off tikz logreset]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else if("`tikz'" == "tikz") {
 27.                 global Flowchart_Debug = "tikz"
 28.                 display "|||||| DebugLog Mode: Tikz"
 29.                 display ""
 30.                 display ""
 31.         }
 32.         else {
 33.                 global Flowchart_Debug = "off"
 34.                 capture log close DebugLog
 35.         }
 36.         
.         if("`logreset'" != "") {
 37.                 capture log close DebugLog
 38.         }
 39. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_161622
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:16:22

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. flowchart_debug, logreset

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "tikz") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off tikz logreset]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else if("`tikz'" == "tikz") {
 27.                 global Flowchart_Debug = "tikz"
 28.                 display "|||||| DebugLog Mode: Tikz"
 29.                 display ""
 30.                 display ""
 31.         }
 32.         else {
 33.                 global Flowchart_Debug = "off"
 34.                 capture log close DebugLog
 35.         }
 36.         
.         if("`logreset'" != "") {
 37.                 capture log close DebugLog
 38.                 display "DebugLog Reset."
 39.         }
 40. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_161658
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:16:58

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. flowchart_debug, logreset
DebugLog Reset.

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "tikz") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off tikz logreset]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else if("`tikz'" == "tikz") {
 27.                 global Flowchart_Debug = "tikz"
 28.                 display "|||||| DebugLog Mode: Tikz"
 29.                 display ""
 30.                 display ""
 31.         }
 32.         else {
 33.                 global Flowchart_Debug = "off"
 34.                 capture log close DebugLog
 35.         }
 36.         
.         if("`logreset'" != "") {
 37.                 capture log close DebugLog
 38.                 display "DebugLog Reset."
 39.         }
 40. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  5.                 }
  6.                 else {
  7.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
  8.                 }
  9.         }
 10.         else {
 11.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 12.                         if("`newrow'" != "") {
 13.                                 if("`endblank'" != "") {
 14.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 15.                                         local addrowskip = "true"
 16.                                 }
 17.                                 else {
 18.                                         local suffix = "}; \\"
 19.                                 }
 20.                         }
 21.                         else {
 22.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 23.                         }
 24.                 }
 25.                 else {
 26.                         local suffix = "\\"
 27.                 }
 28. 
.                 if("`indent'" != "") {
 29.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 30.                 }
 31.                 else {
 32.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 33.                 }
 34.         }
 35. if("$Flowchart_Debug" == "on") {
 36.         display `"Blockfield Linestring: `linestring'"'
 37. }
 38. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 39. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 40. 
. if("`addrowskip'" == "true") {
 41.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 42.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 43.         macro drop addrowskip
 44.         if("$Flowchart_Debug" == "on") {
 45.                 display `"Blockfield Linestring:       & \\"'
 46.         }
 47. }
 48. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_161714
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:17:14

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; 
 ---- END OF LINE

                      LA:  

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. flowchart_debug, logreset
DebugLog Reset.

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if("$Flowchart_Debug" == "on" & trim("``i''") == "flowchart_blank" ) {
144.                                                 display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
145.                                         }
146.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {
147.                                                 local stop = "stop"
148.                                                 continue, break
149.                                         }
150.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
151.                                                 if("$Flowchart_Debug" == "on") {
152.                                                         display "       token: `i'"
153.                                                         display "        desc: ``i''"
154.                                                 }
155.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
156.                                                 if("$Flowchart_Debug" == "on") {
157.                                                         display "       token: `i'"
158.                                                         display "        lnum: ``i''"
159.                                                 }
160.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
161.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
162.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
163.                                                 if("$Flowchart_Debug" == "on") {
164.                                                         display "       token: `i'"
165.                                                         display "        desc: ``i''"
166.                                                 }
167.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
168.                                         if("$Flowchart_Debug" == "on") {
169.                                                 display "   Added to Block - Line `k': "
170.                                         }
171.                                         if(`k' == 1) {
172.                                                 if(trim("``ilookahead''") == ",") {
173.                                                         if("$Flowchart_Debug" == "on") {
174.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
175.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
176.                                                         }
177.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
178.                                                 }
179.                                                 else if(trim("``ilookahead''") == "") {
180.                                                         if("$Flowchart_Debug" == "on") {
181.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
182.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
183.                                                         }
184.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
185.                                                 }
186.                                                 else {
187.                                                         if("$Flowchart_Debug" == "on") {
188.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
189.                                                         }
190.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
191.                                                 }
192.                                         }
193.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
194.                                                 local ilookaheadx2 = `ilookahead' + 1
195.                                                         if("$Flowchart_Debug" == "on") {
196.                                                                 display "Look Ahead x 1: ``ilookahead''"
197.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
198.                                                         }
199.                                                 if(trim("``ilookahead''") == "") {
200.                                                         if("$Flowchart_Debug" == "on") {
201.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
202.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
203.                                                         }
204.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
205.                                                 }
206.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
207.                                                         if("$Flowchart_Debug" == "on") {
208.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
209.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
210.                                                         }
211.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
212.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
213.                                                                 if("$Flowchart_Debug" == "on") {
214.                                                                         display "BREAK"
215.                                                                 }
216.                                                                 local stop = "stop"
217.                                                                 local i = `i' + 1
218.                                                                 continue, break 
219.                                                         }
220.                                                 }
221.                                                 else {
222.                                                         if("$Flowchart_Debug" == "on") {
223.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
224.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
225.                                                         }
226.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
227.                                                 }
228.                                         }
229.                                         else {
230.                                                         if("$Flowchart_Debug" == "on") {
231.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
232.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
233.                                                         }
234.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
235.                                         }
236.                                         if("$Flowchart_Debug" == "on") {
237.                                                 display " ---- END OF LINE"
238.                                                 display ""
239.                                         }
240.                                         local k = `k' + 1
241.                                         local i = `i' + 1
242.                                         local ilookahead = `ilookahead' + 3
243.                                         if("$Flowchart_Debug" == "on") {
244.                                                 display `"                      LA: ``ilookahead'' "'
245.                                         }
246.                                         if(trim("``i''") == "," | "``i''" == "") {
247.                                                 local blockparse = "left"
248.                                                 local stop = "stop"
249.                                         }
250.                                                 
.                                 } // elihw: End of LineWhileLoop
251.         
. if("$Flowchart_Debug" == "tikz") {
252.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
253. }
254.                                 local i = `i' + 1
255.                         } // elihw: End of TokenWhile
256.                 } // fi: End of Writerow
257.         } // fi: End of SyntaxCmdElse
258. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off tikz logreset]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else if("`tikz'" == "tikz") {
 27.                 global Flowchart_Debug = "tikz"
 28.                 display "|||||| DebugLog Mode: Tikz"
 29.                 display ""
 30.                 display ""
 31.         }
 32.         else {
 33.                 global Flowchart_Debug = "off"
 34.                 capture log close DebugLog
 35.         }
 36.         
.         if("`logreset'" != "") {
 37.                 capture log close DebugLog
 38.                 display "...DebugLog reset."
 39.         }
 40. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         if("`end'" != "") {
  5.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; \\"'
  6.                         }
  7.                         else {
  8.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  9.                         }
 10.                 }
 11.                 else {
 12.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
 13.                 }
 14.         }
 15.         else {
 16.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 17.                         if("`newrow'" != "") {
 18.                                 if("`endblank'" != "") {
 19.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 20.                                         local addrowskip = "true"
 21.                                 }
 22.                                 else {
 23.                                         local suffix = "}; \\"
 24.                                 }
 25.                         }
 26.                         else {
 27.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 28.                         }
 29.                 }
 30.                 else {
 31.                         local suffix = "\\"
 32.                 }
 33. 
.                 if("`indent'" != "") {
 34.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 35.                 }
 36.                 else {
 37.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 38.                 }
 39.         }
 40. if("$Flowchart_Debug" == "on") {
 41.         display `"Blockfield Linestring: `linestring'"'
 42. }
 43. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 44. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 45. 
. if("`addrowskip'" == "true") {
 46.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 47.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 48.         macro drop addrowskip
 49.         if("$Flowchart_Debug" == "on") {
 50.                 display `"Blockfield Linestring:       & \\"'
 51.         }
 52. }
 53. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_162343
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:23:43

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; \\
 ---- END OF LINE

                      LA:  

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {                                            
144.                                                 if("$Flowchart_Debug" == "on") {
145.                                                         display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
146.                                                 }
147. flowchart_tdwrite_blockfield `"      & \\ % -- Blank Left Block"'       // flowchart_blank detected at the start of a new row, the center block.
148.                                                 local stop = "stop"
149.                                                 continue, break
150.                                         }
151.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
152.                                                 if("$Flowchart_Debug" == "on") {
153.                                                         display "       token: `i'"
154.                                                         display "        desc: ``i''"
155.                                                 }
156.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
157.                                                 if("$Flowchart_Debug" == "on") {
158.                                                         display "       token: `i'"
159.                                                         display "        lnum: ``i''"
160.                                                 }
161.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
162.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
163.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
164.                                                 if("$Flowchart_Debug" == "on") {
165.                                                         display "       token: `i'"
166.                                                         display "        desc: ``i''"
167.                                                 }
168.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
169.                                         if("$Flowchart_Debug" == "on") {
170.                                                 display "   Added to Block - Line `k': "
171.                                         }
172.                                         if(`k' == 1) {
173.                                                 if(trim("``ilookahead''") == ",") {
174.                                                         if("$Flowchart_Debug" == "on") {
175.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
176.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
177.                                                         }
178.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
179.                                                 }
180.                                                 else if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
186.                                                 }
187.                                                 else {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "tikz") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off tikz logreset]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else if("`tikz'" == "tikz") {
 27.                 global Flowchart_Debug = "tikz"
 28.                 display "|||||| DebugLog Mode: Tikz"
 29.                 display ""
 30.                 display ""
 31.         }
 32.         else {
 33.                 global Flowchart_Debug = "off"
 34.                 capture log close DebugLog
 35.         }
 36.         
.         if("`logreset'" != "") {
 37.                 capture log close DebugLog
 38.                 display "...DebugLog reset."
 39.         }
 40. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         if("`end'" != "") {
  5.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; \\"' // Usually, a left-block that has only 1 line (a singleton) when the center-block was blank.
  6.                         }
  7.                         else {
  8.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  9.                         }
 10.                 }
 11.                 else {
 12.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
 13.                 }
 14.         }
 15.         else {
 16.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 17.                         if("`newrow'" != "") {
 18.                                 if("`endblank'" != "") {
 19.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 20.                                         local addrowskip = "true"
 21.                                 }
 22.                                 else {
 23.                                         local suffix = "}; \\"
 24.                                 }
 25.                         }
 26.                         else {
 27.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 28.                         }
 29.                 }
 30.                 else {
 31.                         local suffix = "\\"
 32.                 }
 33. 
.                 if("`indent'" != "") {
 34.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 35.                 }
 36.                 else {
 37.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 38.                 }
 39.         }
 40. if("$Flowchart_Debug" == "on") {
 41.         display `"Blockfield Linestring: `linestring'"'
 42. }
 43. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 44. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 45. 
. if("`addrowskip'" == "true") {
 46.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 47.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 48.         macro drop addrowskip
 49.         if("$Flowchart_Debug" == "on") {
 50.                 display `"Blockfield Linestring:       & \\"'
 51.         }
 52. }
 53. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. /*
> flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"
>         
> flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"
>         
> flowchart_debug, on
> 
> flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row
> 
> flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
> flowchart_debug, off    
> flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"
>         
> flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         
> flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"
>         
> flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"
> 
> flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"
>         
> flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"
> */
. 
. 
. 
. * DEBUGGING
. * |||||| TEST1: Dummy Row
. flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST2: Row with No left-block
. flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"

. 
. * |||||| TEST3: Row with No right-block
. flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank

. 
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_163055
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:30:55

. * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
. flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest4):
Subcommand with Parameter:  writerow(rownametest4)
Compound Quotes (CQ's):   flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
Subparameter via String Parse (CQs):  rownametest4
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: flowchart_blank,


 Compound Quotes (CQ's):   "rblock1_line1" 97 "This is one line, \\ of a block."

 Entire Statement (With CQ's):  flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."

TOKENS:

1=|      % Row - rownametest4|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest4):
BLOCK START ----         [blockparse: center]
2: flowchart_blank,
1=|      % -- Blank Center Block|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: left]
3: rblock1_line1
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 3
        desc: rblock1_line1
       token: 4
        lnum: 97
       token: 5
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 5] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       & \node [block_left] (rownametest4_left) { This is one line, \\ of a block. (n=\figvalue{rblock1_line1})}; \\
 ---- END OF LINE

                      LA:  

.         * To do: Print '\\' at the end of this singleton's line.
.         
. * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
. flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(rownametest5):
Subcommand with Parameter:  writerow(rownametest5)
Compound Quotes (CQ's):   "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
Subparameter via String Parse (CQs):  rownametest5
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: lblock1_line1


 Compound Quotes (CQ's):   46 "This is one line, \\ of a block.", flowchart_blank

 Entire Statement (With CQ's):  "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank

TOKENS:

1=|      % Row - rownametest5|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(rownametest5):
BLOCK START ----         [blockparse: center]
2: lblock1_line1
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: lblock1_line1
       token: 3
        lnum: 46
       token: 4
        desc: This is one line, \\ of a block.
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: This is one line, \\ of a block.] [ k: 1]
Blockfield Linestring:       \node [block_center] (rownametest5_center) { This is one line, \\ of a block. (n=\figvalue{lblock1_line1})}; 
 ---- END OF LINE

                      LA:  
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      & \\ % -- Blank Left Block|, 2=||, 3=|| indent=||

.         * To do: Print '& \\' at the end of this singleton's line.
. 
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart connect rownametest1_center rownametest1_left

. flowchart connect rownametest1_left rownametest2_left

. flowchart connect rownametest1_center rownametest3_center

. flowchart connect rownametest3_center rownametest5_center

. flowchart connect rownametest2_left rownametest4_left

. 
. /*
> flowchart connect enrollment_center enrollment_left
> flowchart connect enrollment_center assessment_center
> flowchart connect assessment_center assessment_left
> flowchart connect assessment_center random_center
> flowchart connect random_center allocgroup_center
> flowchart connect random_center allocgroup_left, arrow(angled)
> flowchart connect allocgroup_center allocdetails_center
> flowchart connect allocgroup_left allocdetails_left
> flowchart connect allocdetails_center postmeasurement_center
> flowchart connect allocdetails_left postmeasurement_left
> flowchart connect postmeasurement_center measurement3monpostint_center
> flowchart connect measurement3monpostint_center analyzed_center
> flowchart connect postmeasurement_left wlistintervention_left
> flowchart connect wlistintervention_left measurement3monpostint_left
> flowchart connect measurement3monpostint_left wlist3mon_left
> flowchart connect wlist3mon_left analyzed_left 
> */
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {                                            
144.                                                 if("$Flowchart_Debug" == "on") {
145.                                                         display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
146.                                                 }
147. flowchart_tdwrite_blockfield `"      & \\ % -- Blank Left Block"'       // flowchart_blank detected at the start of a new row, the center block.
148.                                                 local stop = "stop"
149.                                                 continue, break
150.                                         }
151.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
152.                                                 if("$Flowchart_Debug" == "on") {
153.                                                         display "       token: `i'"
154.                                                         display "        desc: ``i''"
155.                                                 }
156.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
157.                                                 if("$Flowchart_Debug" == "on") {
158.                                                         display "       token: `i'"
159.                                                         display "        lnum: ``i''"
160.                                                 }
161.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
162.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
163.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
164.                                                 if("$Flowchart_Debug" == "on") {
165.                                                         display "       token: `i'"
166.                                                         display "        desc: ``i''"
167.                                                 }
168.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
169.                                         if("$Flowchart_Debug" == "on") {
170.                                                 display "   Added to Block - Line `k': "
171.                                         }
172.                                         if(`k' == 1) {
173.                                                 if(trim("``ilookahead''") == ",") {
174.                                                         if("$Flowchart_Debug" == "on") {
175.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
176.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
177.                                                         }
178.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
179.                                                 }
180.                                                 else if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
186.                                                 }
187.                                                 else {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "tikz") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off tikz logreset]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else if("`tikz'" == "tikz") {
 27.                 global Flowchart_Debug = "tikz"
 28.                 display "|||||| DebugLog Mode: Tikz"
 29.                 display ""
 30.                 display ""
 31.         }
 32.         else {
 33.                 global Flowchart_Debug = "off"
 34.                 capture log close DebugLog
 35.         }
 36.         
.         if("`logreset'" != "") {
 37.                 capture log close DebugLog
 38.                 display "...DebugLog reset."
 39.         }
 40. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         if("`end'" != "") {
  5.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; \\"' // Usually, a left-block that has only 1 line (a singleton) when the center-block was blank.
  6.                         }
  7.                         else {
  8.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  9.                         }
 10.                 }
 11.                 else {
 12.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
 13.                 }
 14.         }
 15.         else {
 16.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 17.                         if("`newrow'" != "") {
 18.                                 if("`endblank'" != "") {
 19.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 20.                                         local addrowskip = "true"
 21.                                 }
 22.                                 else {
 23.                                         local suffix = "}; \\"
 24.                                 }
 25.                         }
 26.                         else {
 27.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 28.                         }
 29.                 }
 30.                 else {
 31.                         local suffix = "\\"
 32.                 }
 33. 
.                 if("`indent'" != "") {
 34.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 35.                 }
 36.                 else {
 37.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 38.                 }
 39.         }
 40. if("$Flowchart_Debug" == "on") {
 41.         display `"Blockfield Linestring: `linestring'"'
 42. }
 43. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 44. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 45. 
. if("`addrowskip'" == "true") {
 46.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 47.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 48.         macro drop addrowskip
 49.         if("$Flowchart_Debug" == "on") {
 50.                 display `"Blockfield Linestring:       & \\"'
 51.         }
 52. }
 53. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. 
. flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"

.         
. flowchart writerow(assessment): ///
>         "assessed" 156 "{Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"

.         
. flowchart_debug, on
|||||| DebugLog Started: Log ID = 31Jul2017_163427
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  DebugLog
       log:  C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\DebugLog.log
  log type:  text
 opened on:  31 Jul 2017, 16:34:27

. 
. flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(random):
Subcommand with Parameter:  writerow(random)
Compound Quotes (CQ's):   "randomized" 102 "Randomized", flowchart_blank
Subparameter via String Parse (CQs):  random
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: randomized


 Compound Quotes (CQ's):   102 "Randomized", flowchart_blank

 Entire Statement (With CQ's):  "randomized" 102 "Randomized", flowchart_blank

TOKENS:

1=|      % Row - random|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(random):
BLOCK START ----         [blockparse: center]
2: randomized
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: randomized
       token: 3
        lnum: 102
       token: 4
        desc: Randomized
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: Randomized] [ k: 1]
Blockfield Linestring:       \node [block_center] (random_center) { Randomized (n=\figvalue{randomized})}; 
 ---- END OF LINE

                      LA:  
BLOCK START ----         [blockparse: left]
6: flowchart_blank
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       FLOWCHART_BLANK [blockparse: left] [ i#: 6] [ token: flowchart_blank] [ k: 1]
1=|      & \\ % -- Blank Left Block|, 2=||, 3=|| indent=||

. 
. flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

COMMAND PARSING: 
Subcommand via GetToken: :
Subcommand via Syntax: writerow(allocgroup):
Subcommand with Parameter:  writerow(allocgroup)
Compound Quotes (CQ's):           "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"
Subparameter via String Parse (CQs):  allocgroup
Subcommand via String Parse (CQs):  writerow

ROW CONTENT: 

 First Variable: alloc_interventiongroup


 Compound Quotes (CQ's):   51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

 Entire Statement (With CQ's):          "alloc_interventiongroup" 51 "{Allocated to Intervention group",         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

TOKENS:

1=|      % Row - allocgroup|, 2=||, 3=|| indent=||
BLOCK START ----         [blockparse: center]
1: writerow(allocgroup):
BLOCK START ----         [blockparse: center]
2: alloc_interventiongroup
          [blockparse: center]
                      LA: , 
 ---- NEW LINE
       token: 2
        desc: alloc_interventiongroup
       token: 3
        lnum: 51
       token: 4
        desc: {Allocated to Intervention group
   Added to Block - Line 1: 
       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]
      [blockparse: center] [ i#: 4] [ token: {Allocated to Intervention group] [ k: 1]
Blockfield Linestring:       \node [block_center] (allocgroup_center) { {Allocated to Intervention group (n=\figvalue{alloc_interventiongroup})}; 
 ---- END OF LINE

                      LA: Allocated to Wait-list control group 
BLOCK START ----         [blockparse: left]
6: alloc_waitlistgroup
          [blockparse: left]
                      LA:  
 ---- NEW LINE
       token: 6
        desc: alloc_waitlistgroup
       token: 7
        lnum: 51
       token: 8
        desc: Allocated to Wait-list control group
   Added to Block - Line 1: 
       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]
      [blockparse: left] [ i#: 8] [ token: Allocated to Wait-list control group] [ k: 1]
Blockfield Linestring:       & \node [block_left] (allocgroup_left) { Allocated to Wait-list control group (n=\figvalue{alloc_waitlistgroup})}; \\
 ---- END OF LINE

                      LA:  

. flowchart_debug, off    
|||||| DebugLog Off



. flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"

.         
. flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         

. flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"

.         
. flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"

. 
. flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"

.         
. flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"

. 
. flowchart connect enrollment_center enrollment_left

. flowchart connect enrollment_center assessment_center

. flowchart connect assessment_center assessment_left

. flowchart connect assessment_center random_center

. flowchart connect random_center allocgroup_center

. flowchart connect random_center allocgroup_left, arrow(angled)

. flowchart connect allocgroup_center allocdetails_center

. flowchart connect allocgroup_left allocdetails_left

. flowchart connect allocdetails_center postmeasurement_center

. flowchart connect allocdetails_left postmeasurement_left

. flowchart connect postmeasurement_center measurement3monpostint_center

. flowchart connect measurement3monpostint_center analyzed_center

. flowchart connect postmeasurement_left wlistintervention_left

. flowchart connect wlistintervention_left measurement3monpostint_left

. flowchart connect measurement3monpostint_left wlist3mon_left

. flowchart connect wlist3mon_left analyzed_left 

. 
. 
. /*
> * DEBUGGING
> * |||||| TEST1: Dummy Row
> flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST2: Row with No left-block
> flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST3: Row with No right-block
> flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
> 
> flowchart_debug, on
> * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
> flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
>         * To do: Print '\\' at the end of this singleton's line.
>         
> * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
> flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
>         * To do: Print '& \\' at the end of this singleton's line.
> 
> flowchart_debug, off
> 
> flowchart connect rownametest1_center rownametest1_left
> flowchart connect rownametest1_left rownametest2_left
> flowchart connect rownametest1_center rownametest3_center
> flowchart connect rownametest3_center rownametest5_center
> flowchart connect rownametest2_left rownametest4_left
> */
. 
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {                                            
144.                                                 if("$Flowchart_Debug" == "on") {
145.                                                         display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
146.                                                 }
147. flowchart_tdwrite_blockfield `"      & \\ % -- Blank Left Block"'       // flowchart_blank detected at the start of a new row, the center block.
148.                                                 local stop = "stop"
149.                                                 continue, break
150.                                         }
151.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
152.                                                 if("$Flowchart_Debug" == "on") {
153.                                                         display "       token: `i'"
154.                                                         display "        desc: ``i''"
155.                                                 }
156.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
157.                                                 if("$Flowchart_Debug" == "on") {
158.                                                         display "       token: `i'"
159.                                                         display "        lnum: ``i''"
160.                                                 }
161.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
162.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
163.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
164.                                                 if("$Flowchart_Debug" == "on") {
165.                                                         display "       token: `i'"
166.                                                         display "        desc: ``i''"
167.                                                 }
168.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
169.                                         if("$Flowchart_Debug" == "on") {
170.                                                 display "   Added to Block - Line `k': "
171.                                         }
172.                                         if(`k' == 1) {
173.                                                 if(trim("``ilookahead''") == ",") {
174.                                                         if("$Flowchart_Debug" == "on") {
175.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
176.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
177.                                                         }
178.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
179.                                                 }
180.                                                 else if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
186.                                                 }
187.                                                 else {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "tikz") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off tikz logreset]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else if("`tikz'" == "tikz") {
 27.                 global Flowchart_Debug = "tikz"
 28.                 display "|||||| DebugLog Mode: Tikz"
 29.                 display ""
 30.                 display ""
 31.         }
 32.         else {
 33.                 global Flowchart_Debug = "off"
 34.                 capture log close DebugLog
 35.         }
 36.         
.         if("`logreset'" != "") {
 37.                 capture log close DebugLog
 38.                 display "...DebugLog reset."
 39.         }
 40. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         if("`end'" != "") {
  5.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; \\"' // Usually, a left-block that has only 1 line (a singleton) when the center-block was blank.
  6.                         }
  7.                         else {
  8.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  9.                         }
 10.                 }
 11.                 else {
 12.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
 13.                 }
 14.         }
 15.         else {
 16.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 17.                         if("`newrow'" != "") {
 18.                                 if("`endblank'" != "") {
 19.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 20.                                         local addrowskip = "true"
 21.                                 }
 22.                                 else {
 23.                                         local suffix = "}; \\"
 24.                                 }
 25.                         }
 26.                         else {
 27.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 28.                         }
 29.                 }
 30.                 else {
 31.                         local suffix = "\\"
 32.                 }
 33. 
.                 if("`indent'" != "") {
 34.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 35.                 }
 36.                 else {
 37.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 38.                 }
 39.         }
 40. if("$Flowchart_Debug" == "on") {
 41.         display `"Blockfield Linestring: `linestring'"'
 42. }
 43. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 44. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 45. 
. if("`addrowskip'" == "true") {
 46.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 47.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 48.         macro drop addrowskip
 49.         if("$Flowchart_Debug" == "on") {
 50.                 display `"Blockfield Linestring:       & \\"'
 51.         }
 52. }
 53. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. 
. flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"

.         
. flowchart writerow(assessment): ///
>         "assessed" 156 "Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"

.         
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row

. 
. flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "{Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

. flowchart_debug, off    
|||||| DebugLog Off



. flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"

.         
. flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         

. flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"

.         
. flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"

. 
. flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"

.         
. flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"

. 
. flowchart connect enrollment_center enrollment_left

. flowchart connect enrollment_center assessment_center

. flowchart connect assessment_center assessment_left

. flowchart connect assessment_center random_center

. flowchart connect random_center allocgroup_center

. flowchart connect random_center allocgroup_left, arrow(angled)

. flowchart connect allocgroup_center allocdetails_center

. flowchart connect allocgroup_left allocdetails_left

. flowchart connect allocdetails_center postmeasurement_center

. flowchart connect allocdetails_left postmeasurement_left

. flowchart connect postmeasurement_center measurement3monpostint_center

. flowchart connect measurement3monpostint_center analyzed_center

. flowchart connect postmeasurement_left wlistintervention_left

. flowchart connect wlistintervention_left measurement3monpostint_left

. flowchart connect measurement3monpostint_left wlist3mon_left

. flowchart connect wlist3mon_left analyzed_left 

. 
. 
. /*
> * DEBUGGING
> * |||||| TEST1: Dummy Row
> flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST2: Row with No left-block
> flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST3: Row with No right-block
> flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
> 
> flowchart_debug, on
> * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
> flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
>         * To do: Print '\\' at the end of this singleton's line.
>         
> * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
> flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
>         * To do: Print '& \\' at the end of this singleton's line.
> 
> flowchart_debug, off
> 
> flowchart connect rownametest1_center rownametest1_left
> flowchart connect rownametest1_left rownametest2_left
> flowchart connect rownametest1_center rownametest3_center
> flowchart connect rownametest3_center rownametest5_center
> flowchart connect rownametest2_left rownametest4_left
> */
. 
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

. do "C:\Users\Krist\Desktop\Isaac\JHSPH\Capstone\Stata\Do\13-IQSCVDMort-Analysis-SubjectDisposition.do"

. 
. *! version 0.0.1  28jul2017  Isaac M. E. Dodd
. * FLOWCHART ---------------------------------------------------------------------
. capture program drop flowchart

. program define flowchart
  1.         version 13
  2.         syntax [anything] [using/] [, name(string) value(string) input(string) output(string) arrow(string) *]
  3.         
.         if("`1'" == "init" | "`1'" == "init,") {
  4.                 global Flowchart_Settings = ""  // Stores settings in a space-delimited string.
  5.                 global Flowchart_IteratorBlockfields = 0
  6.                 global Flowchart_IteratorPathfields = 0
  7.                 .Global.blockfields=.object.new
  8.                 .Global.pathfields=.object.new
  9.                 .Global.blockfields.Declare array list
 10.                 .Global.pathfields.Declare array list
 11.                 
.                 capture file close FlowchartFile
 12.                 file open FlowchartFile using "`using'", write text replace
 13.                 flowchart_init
 14.         }
 15.         else if("`1'" == "close" | "`1'" == "finalize" | "`1'" == "close," | "`1'" == "finalize," ) {
 16.                 if("$Flowchart_Debug" == "on") {
 17.                         display "Closed."
 18.                 }
 19.                 capture file close FlowchartFile 
 20.                 flowchart_tdfinalize, input("`input'") output("`output'")
 21.         }
 22.         else if("`1'" == "write") {
 23.                 if("`2'" == "box" | "`2'" == "box,") {
 24.                         if("$Flowchart_Debug" == "on") {
 25.                                 display "Write: `2' `name' `value'"
 26.                         }
 27.                         flowchart_writevar, name("Test") value("Testing testing 1 2 3 5 6 7 8 9 10 ...")
 28.                 }
 29.                 else if("`2'" == "row" | "`2'" == "row,") {
 30.                         if("$Flowchart_Debug" == "on") {
 31.                                 display "Write: `2' `name' `value'"
 32.                         }
 33.                 }
 34.         }
 35.         else if("`1'" == "connect") {
 36.                 if("$Flowchart_Debug" == "on") {
 37.                         display "Connect: `1' `2' `3'"
 38.                 }
 39.                 if("`arrow'" != "") {
 40.                         if("`arrow'" == "angled" | "`arrow'" == "angle") {
 41.                                 local arrow = "-|"
 42.                                 if("$Flowchart_Debug" == "on") {
 43.                                         display "`3'"
 44.                                 }
 45.                                 if(strpos(trim("`3'"), ",") > 0) {                                      
 46.                                         local 3 = substr(trim("`3'"), 1, strpos(trim("`3'"), ",")-1)
 47.                                         if("$Flowchart_Debug" == "on") {
 48.                                                 display "`3'"
 49.                                         }
 50.                                 }                                       
 51.                         }
 52.                 }
 53.                 else {
 54.                         local arrow = "--"
 55.                 }
 56.                 flowchart_tdwrite_pathfield `"      \path (`2') `arrow' (`3');"'
 57.         }
 58.         else {
 59.                 *Sub-Commands that Require More Advanced Parsing
.                 * Parse the token for a possible sub-command that contains a parameter (e.g., flowchart subcommand(parameter): ... )
.                 *       This is necessary since Stata's 'syntax' command returns the subcommand token `1' with a colon. This method ensures the proper string is parsed.
.                 gettoken subcommand 0 : 0, parse(" :") quotes
 60.                 while `"`subcommand'"' != ":" & `"`subcommand'"' != "" {
 61.                         local subcmdwithparam `"`subcmdwithparam' `subcommand'"'
 62.                         
.                         gettoken subcommand 0 : 0, parse(" :") quotes
 63.                         if("$Flowchart_Debug" == "on") {
 64.                                 display ""
 65.                                 display "COMMAND PARSING: "
 66.                                 display `"Subcommand via GetToken: `subcommand'"'
 67.                         }
 68.                         local subcmdsyntax = "`1'"
 69.                         if("$Flowchart_Debug" == "on") {
 70.                                 display "Subcommand via Syntax: `subcmdsyntax'"
 71.                                 display `"Subcommand with Parameter: `subcmdwithparam'"'
 72.                                 display `"Compound Quotes (CQ's):  `0'"'
 73.                         }
 74.                 }
 75.                 * Parse the possible sub-command with parameter, accounting for any whitespace within the passed parameter and subcommand.
.                 local subparam = trim(substr(trim("`subcmdwithparam'"), strpos(trim("`subcmdwithparam'"), "(")+1, length(trim("`subcmdwithparam'"))-strpos(trim("`subcmdwithparam'"), "(")-1))
 76.                 local subcmdparsed = substr(trim("`subcmdwithparam'"), 1, strpos(trim("`subcmdwithparam'"), "(")-1)
 77.                 if("$Flowchart_Debug" == "on") {
 78.                         display `"Subparameter via String Parse (CQs):  `subparam'"'
 79.                         display `"Subcommand via String Parse (CQs):  `subcmdparsed'"'
 80.                 }
 81.                         
.                 if("`1'" == "writerow:" | "`1'" == "writerow" | "`subcmdparsed'" == "writerow" | trim("`subcmdparsed'") == "writerow") {
 82.         
.                         gettoken varfirst varothers : 0
 83.                         if("$Flowchart_Debug" == "on") {
 84.                                 display ""
 85.                                 display "ROW CONTENT: "
 86.                                 display ""
 87.                                 display " First Variable: `varfirst'"
 88.                                 display ""
 89.                                 * display " Macro Without Quotes: " `varothers' <-- Breaks with flowchart_blank
.                                 display ""
 90.                                 display `" Compound Quotes (CQ's):  `varothers'"'
 91.                                 display ""
 92.                                 display `" Entire Statement (With CQ's): `0'"'
 93.                                 display ""
 94. 
.                                 display "TOKENS:"
 95.                                 display ""
 96.                         }
 97.                         
.                         local i = 1             // Token Iterator
 98.                         local blockparse = "center"                                             // First Block Default = Center
 99. flowchart_tdwrite_blockfield `"      % Row - `subparam'"'       // Row Command with Subparam (This is the Rowname)
100. 
.                         while ("``i''" != "") { // while: TokenWhileLoop -- Loop through all of the tokens passed after the 'writerow(subparam):' call
101.                                 if("$Flowchart_Debug" == "on") {
102.                                         display "BLOCK START ----         [blockparse: `blockparse']"
103.                                         display "`i': ``i''"    // Print Token Number that starts the block, and the contents of that Token
104.                                 }
105.                                 
.                                 if("``i''" == "`subcmdparsed'" | trim("``i''") == "`subcmdwithparam'" | trim("``i''") == "`subcmdsyntax'") {
106.                                         local i = `i' + 1       // If the first token is the subparameter detected, ignore it and move to the next token instead.
107.                                         continue
108.                                 }
109.                                 else if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {
110.                                         * If a comma is encountered, or the block is blank/empty on the first block (default center), switch the blockparse flag to parse the left block (lblock) instead of the default center block (cblock).
.                                         local blockparse = "left"
111. flowchart_tdwrite_blockfield `"      % -- Blank Center Block"'  // flowchart_blank detected at the start of a new row, the center block.
112.                                         local i = `i' + 1       // Move to the next token after the loop continues.
113.                                         continue
114.                                 }
115.                                 
.                                 * Generate a Look-Ahead Macro: This allows conditional if statements to anticipate the end of a block. (Returns 1 triplet/line ahead of the current triplet/line being parsed.)
.                                 local ilookahead = `i' + 3
116.                                 if("$Flowchart_Debug" == "on") {
117.                                         display `"          [blockparse: `blockparse']"'
118.                                         display `"                      LA: ``ilookahead'' "'
119.                                 }
120.                                         * To Do: Fix this so that the program puts the node on the lead rather than defining this at the start.
.                                 if("`blockparse'" == "center") {
121.         local blockparsetoken = `"      \node [block_`blockparse'] (`subparam'_`blockparse') {"'        
122.                                 } // fi: End of BlockParse
123.                                 else if("`blockparse'" == "left") {
124.         local blockparsetoken = `"      & \node [block_`blockparse'] (`subparam'_`blockparse') {"'      
125.                                 } // fi: End of BlockParse
126.                                 
.                                 local k = 1     // Line Iterator        - The first line (k=1) is the lead line. If only 1 line for the block is present (i.e., the Look-Ahead is a ',' after the lead-line) then the lead line represents a singleton lead-l
> ine, which is the only line in the block.
127.                                 local stop = ""
128.                                 while("`stop'" == "") { // while: LineWhileLoop - Loop through all of the lines for each block. The 'Stop' flag is raised when a comma is encountered or there is no more content passed in the command to parse.
129.                                         if("$Flowchart_Debug" == "on") {
130.                                                 display " ---- NEW LINE"
131.                                         }
132.                                         if(trim("``i''") == "," | ((lower(trim("``i''")) == "flowchart_blank" | lower(trim("``i''")) == "flowchart_blank,") & "`blockparse'" == "center") ) {   // Inept - To Do
133.                                                 * Here, if the first token encountered is a ',' or it's the first block parsed and the block is blank, produce no content. (If the second block, the left block, is blank, it needs to continue to produce
>  a blank line '& \\' character.)
.                                                 if("$Flowchart_Debug" == "on") {
134.                                                         display " --- "
135.                                                         display " --- Blank First Row --- "
136.                                                         display " ---   Switching to parse the next block."
137.                                                         display " --- "
138.                                                 }
139.                                                 local blockparse = "left"
140.                                                 local stop = "stop"
141.                                                 break
142.                                         }
143.                                         if( trim("``i''") == "flowchart_blank" & "`blockparse'" == "left") {                                            
144.                                                 if("$Flowchart_Debug" == "on") {
145.                                                         display "       FLOWCHART_BLANK [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
146.                                                 }
147. flowchart_tdwrite_blockfield `"      & \\ % -- Blank Left Block"'       // flowchart_blank detected at the start of a new row, the center block.
148.                                                 local stop = "stop"
149.                                                 continue, break
150.                                         }
151.                                         local linename = `"``i''"'      // Field 1 of the Line is expected to be the line-name, which is also the variable_name.
152.                                                 if("$Flowchart_Debug" == "on") {
153.                                                         display "       token: `i'"
154.                                                         display "        desc: ``i''"
155.                                                 }
156.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
157.                                                 if("$Flowchart_Debug" == "on") {
158.                                                         display "       token: `i'"
159.                                                         display "        lnum: ``i''"
160.                                                 }
161.                                         local linenum = `"``i''"'       // Field 2 of the Line is expected to be the line's value-number, variable_value, the (n=#).
162.                                         flowchart_writevar, name(`"`linename'"') value(`"`linenum'"') // Store both the number and the line's name, with the line-name as 
163.                                         * the variable_name and the line's value-number as the variable_value with an equal sign as the delimiter (variable_name = variable_value) 
.                                         * with a newline after. (Write it to the figvalue file.)
.                                         local i = `i' + 1                       // Move to the next field in the triplet/line.
164.                                                 if("$Flowchart_Debug" == "on") {
165.                                                         display "       token: `i'"
166.                                                         display "        desc: ``i''"
167.                                                 }
168.                                         local linedesc = `"``i''"'      // Field 3 of the Line is expected to be the descriptive sentence.
169.                                         if("$Flowchart_Debug" == "on") {
170.                                                 display "   Added to Block - Line `k': "
171.                                         }
172.                                         if(`k' == 1) {
173.                                                 if(trim("``ilookahead''") == ",") {
174.                                                         if("$Flowchart_Debug" == "on") {
175.                                                                 display "       --- Singleton Lead-line on Center Block (k=1, LA is Comma): tdwriteline - [content] [lead] [singleton]"
176.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
177.                                                         }
178.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton
179.                                                 }
180.                                                 else if(trim("``ilookahead''") == "") {
181.                                                         if("$Flowchart_Debug" == "on") {
182.                                                                 display "       --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
183.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
184.                                                         }
185.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"') singleton end
186.                                                 }
187.                                                 else {
188.                                                         if("$Flowchart_Debug" == "on") {
189.                                                                 *display "      --- Singleton Lead-line on Left Block With Blank Center Block (so k=1) and Singleton Left Block (so LA is Blank): tdwriteline - [content] [lead] [singleton] [end]"
.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
190.                                                         }
191.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') lead(`"`blockparsetoken'"')
192.                                                 }
193.                                         }
194.                                         else if(trim("``ilookahead''") == "," | trim("``ilookahead''") == "" | lower(trim("``i''")) == "flowchart_blank" | lower(trim("``ilookahead''")) == "flowchart_blank") {
195.                                                 local ilookaheadx2 = `ilookahead' + 1
196.                                                         if("$Flowchart_Debug" == "on") {
197.                                                                 display "Look Ahead x 1: ``ilookahead''"
198.                                                                 display "Look Ahead x 2: ``ilookaheadx2''"
199.                                                         }
200.                                                 if(trim("``ilookahead''") == "") {
201.                                                         if("$Flowchart_Debug" == "on") {
202.                                                                 display "       --- End of Row with New Row - LA is Blank: tdwriteline - [content] [newrow] [end]"
203.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
204.                                                         }
205.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end
206.                                                 }
207.                                                 else if( (trim("``ilookahead''") == "," & trim("``ilookaheadx2''") == "") | lower(trim("``ilookaheadx2''")) == "flowchart_blank" ) {
208.                                                         if("$Flowchart_Debug" == "on") {
209.                                                                 display "...--- EndBlank Detection: Second Block is Blank... tdwriteline - [content] [newrow] [end] [endblank]"
210.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
211.                                                         }
212.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') newrow end endblank
213.                                                         * The second block, the left block, is blank: Stop the LineWhileLoop to stop parsing the flowchart_blank token and any tokens after it.
.                                                         if(lower(trim("``ilookaheadx2''")) == "flowchart_blank") {
214.                                                                 if("$Flowchart_Debug" == "on") {
215.                                                                         display "BREAK"
216.                                                                 }
217.                                                                 local stop = "stop"
218.                                                                 local i = `i' + 1
219.                                                                 continue, break 
220.                                                         }
221.                                                 }
222.                                                 else {
223.                                                         if("$Flowchart_Debug" == "on") {
224.                                                                 display "...--- End of Row: tdwriteline - [content] [end]""
225.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
226.                                                         }
227.                                                         flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') end
228.                                                 }
229.                                         }
230.                                         else {
231.                                                         if("$Flowchart_Debug" == "on") {
232.                                                                 display "...--- Same Row, End of Line: tdwriteline - [content] "
233.                                                                 display "      [blockparse: `blockparse'] [ i#: `i'] [ token: ``i''] [ k: `k']"
234.                                                         }
235.                                                 flowchart_tdwriteline, name(`"`linename'"') num(`"`linenum'"') desc(`"`linedesc'"') 
236.                                         }
237.                                         if("$Flowchart_Debug" == "on") {
238.                                                 display " ---- END OF LINE"
239.                                                 display ""
240.                                         }
241.                                         local k = `k' + 1
242.                                         local i = `i' + 1
243.                                         local ilookahead = `ilookahead' + 3
244.                                         if("$Flowchart_Debug" == "on") {
245.                                                 display `"                      LA: ``ilookahead'' "'
246.                                         }
247.                                         if(trim("``i''") == "," | "``i''" == "") {
248.                                                 local blockparse = "left"
249.                                                 local stop = "stop"
250.                                         }
251.                                                 
.                                 } // elihw: End of LineWhileLoop
252.         
. if("$Flowchart_Debug" == "tikz") {
253.         flowchart_tdwrite_blockfield `"      %  +- Debug - End block for row: `subparam'"'      // End of the Row
254. }
255.                                 local i = `i' + 1
256.                         } // elihw: End of TokenWhile
257.                 } // fi: End of Writerow
258.         } // fi: End of SyntaxCmdElse
259. end

. capture program drop flowchart_debug

. program define flowchart_debug 
  1.         syntax [anything] [, on off tikz logreset]
  2.         if("`on'" == "on") {
  3.                 global Flowchart_Debug = "on"
  4.                 
.                 set more off
  5.                 set linesize 255
  6.                 local logid = subinstr("`c(current_date)'_`c(current_time)'", ":", "", .)
  7.                 local logid = subinstr("`logid'", " ", "", .)
  8.                 display "|||||| DebugLog Started: Log ID = `logid'"
  9.                 capture log query DebugLog
 10.                 * If a log has already been started, DebugLog will exist. If it is off (i.e., it was started but has been closed/turned off), 
.                 *       append to the existing log. If DebugLog does not exist (r(status) is blank) or it exists but is on already, replace the log.
.                 if("`r(status)'" == "off") {    
 11.                         capture log close DebugLog
 12.                         log using "DebugLog.log", name(DebugLog) append text
 13.                 }
 14.                 else {
 15.                         capture log close DebugLog
 16.                         log using "DebugLog.log", name(DebugLog) replace text
 17.                 }
 18.         }
 19.         else if("`off'" == "off") {
 20.                 global Flowchart_Debug = "off"
 21.                 display "|||||| DebugLog Off"
 22.                 display ""
 23.                 display ""
 24.                 capture log off DebugLog
 25.         }
 26.         else if("`tikz'" == "tikz") {
 27.                 global Flowchart_Debug = "tikz"
 28.                 display "|||||| DebugLog Mode: Tikz"
 29.                 display ""
 30.                 display ""
 31.         }
 32.         else {
 33.                 global Flowchart_Debug = "off"
 34.                 capture log close DebugLog
 35.         }
 36.         
.         if("`logreset'" != "") {
 37.                 capture log close DebugLog
 38.                 display "...DebugLog reset."
 39.         }
 40. end

. capture program drop flowchart_init

. program define flowchart_init
  1.         flowchart_writevar, name("set_dummy") value("null")     // Set dummy variable since the first variable is not recognized by texdoc.
  2.         flowchart_writevar, name("set_draw") value("black")
  3.         flowchart_writevar, name("set_fill") value("white")
  4.         flowchart_writevar, name("set_center_textwidth") value("8em")
  5.         flowchart_writevar, name("set_center_textalign") value("centered")
  6.         flowchart_writevar, name("set_center_minheight") value("4em")
  7.         flowchart_writevar, name("set_left_textwidth") value("16em")
  8.         flowchart_writevar, name("set_left_textalign") value("ragged")
  9.         flowchart_writevar, name("set_left_minheight") value("4em")
 10.         flowchart_writevar, name("set_left_innersep") value("6pt")
 11.         flowchart_writevar, name("set_noborder_textwidth") value("18em")
 12.         flowchart_writevar, name("set_noborder_textalign") value("centered")
 13.         flowchart_writevar, name("set_noborder_minheight") value("1em")
 14.         flowchart_writevar, name("set_noborder_draw") value("none")
 15.         flowchart_writevar, name("set_noborder_fill") value("none")
 16.         flowchart_writevar, name("set_assign_textwidth") value("18em")
 17.         flowchart_writevar, name("set_assign_textalign") value("ragged")
 18.         flowchart_writevar, name("set_assign_minheight") value("3em")
 19.         flowchart_writevar, name("set_assign_innersep") value("6pt")
 20.         flowchart_writevar, name("set_lost_textwidth") value("16em")
 21.         flowchart_writevar, name("set_lost_textalign") value("ragged")
 22.         flowchart_writevar, name("set_lost_minheight") value("3em")
 23.         flowchart_writevar, name("set_lost_innersep") value("6pt")
 24. end

. capture program drop flowchart_writevar

. program define flowchart_writevar
  1.         syntax [anything] [, name(string) value(string) *]      
  2.         local variablerow "`name' = `value'"
  3.         file write FlowchartFile "`variablerow'" _n
  4.         if(substr("`name'",1,4) == "set_") {
  5.                 global Flowchart_Settings = `"$Flowchart_Settings @`name'"'
  6.                 global Flowchart_Settings = `"$Flowchart_Settings "`value'""'
  7.         }
  8. end

. 
. capture program drop flowchart_tdfinalize

. program define flowchart_tdfinalize
  1.         syntax , input(string) output(string)
  2.         ***\\ TIKZ PICTURE: Write the TikZ Picture to the file.
.         if("$Flowchart_Debug" == "on") {
  3.                 display "`input' `output'"
  4.         }
  5.         texdoc do "`input'", init("`output'") replace
  6.         * Important Note: The '.tikz' extension here is important since if it is not specified, calling 'texdoc do' in the Main Analysis Do File will overwrite the .tex file of the same name in the same directory.
.         texdoc close
  7. end

. 
. 
. capture program drop flowchart_tdwrite_blockfield

. program define flowchart_tdwrite_blockfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
  3.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. 
. capture program drop flowchart_tdwrite_pathfield

. program define flowchart_tdwrite_pathfield
  1.         syntax [anything] [, indent]
  2.         global Flowchart_IteratorPathfields = $Flowchart_IteratorPathfields + 1
  3.         .pathfields.list[$Flowchart_IteratorPathfields] = `"`1'"'
  4.         if("$Flowchart_Debug" == "on") {
  5.                 display  "1=|`1'|, 2=|`2'|, 3=|`3'| indent=|`indent'|"
  6.         }
  7. *       texdoc write "`varname'"
. end

. capture program drop flowchart_tdwriteline

. program define flowchart_tdwriteline
  1.         syntax [anything] [, indent lead(string) singleton end endblank newrow name(string) num(string) desc(string)]
  2.         if("`lead'" != "") {
  3.                 if("`singleton'" != "") {
  4.                         if("`end'" != "") {
  5.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; \\"' // Usually, a left-block that has only 1 line (a singleton) when the center-block was blank.
  6.                         }
  7.                         else {
  8.                                 local linestring = `"`lead' `desc' (n=\figvalue{`name'})}; "'
  9.                         }
 10.                 }
 11.                 else {
 12.                         local linestring = `"`lead' `desc' (n=\figvalue{`name'}): \\"'
 13.                 }
 14.         }
 15.         else {
 16.                 * Determine ending first (suffix)
.                 if("`end'" != "") {
 17.                         if("`newrow'" != "") {
 18.                                 if("`endblank'" != "") {
 19.                                         local suffix = "}; \\" // Add Row-Skip: + "      & \\"
 20.                                         local addrowskip = "true"
 21.                                 }
 22.                                 else {
 23.                                         local suffix = "}; \\"
 24.                                 }
 25.                         }
 26.                         else {
 27.                                 local suffix = "};"             // No New Row (i.e., it is the first block/center block, so don't print \\ at the end).
 28.                         }
 29.                 }
 30.                 else {
 31.                         local suffix = "\\"
 32.                 }
 33. 
.                 if("`indent'" != "") {
 34.                         local linestring = `"        \h\h \figvalue{`name'} `desc' `suffix'"'
 35.                 }
 36.                 else {
 37.                         local linestring = `"        \h `desc' (n=\figvalue{`name'}) `suffix'"'
 38.                 }
 39.         }
 40. if("$Flowchart_Debug" == "on") {
 41.         display `"Blockfield Linestring: `linestring'"'
 42. }
 43. global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 44. .blockfields.list[$Flowchart_IteratorBlockfields] = `"`linestring'"'
 45. 
. if("`addrowskip'" == "true") {
 46.         global Flowchart_IteratorBlockfields = $Flowchart_IteratorBlockfields + 1
 47.         .blockfields.list[$Flowchart_IteratorBlockfields] = `"      & \\"'
 48.         macro drop addrowskip
 49.         if("$Flowchart_Debug" == "on") {
 50.                 display `"Blockfield Linestring:       & \\"'
 51.         }
 52. }
 53. *flowchart_tdwrite_blockfield `"`linestring'"'
. *       texdoc write "`varname'"
. end

. 
. 
. 
. * ---------------------------------------------------------------------
. 
. * DISPOSITION SUBANALYSIS: Analyze and setup the subject disposition.
. 
. 
. * DIAGRAM: Call Post-Production texdoc file to write this analysis as a diagram.
. 
. flowchart init using "..\Data\Subanalysis Data\Methods--Fig-TEST.data"

. 
. *flowchart write box, name("Test")
. *flowchart write box, name("TestBoxName") value("TestBoxValue")
. *flowchart write row, name("TestRow")
. *flowchart write row, name("TestRowName") value("TestRowValue")
. *flowchart write row
. 
. *display `" $Flowchart_Settings "'
. 
. 
. flowchart writerow(enrollment): ///
>         "referred" 173 "Referred", ///
>         "referred_excluded" 17 "Excluded" ///
>         "referred_excluded_nopartic" 9 "a) Did not wish to participate" ///
>         "referred_excluded_noshow" 5 "b) Did not show for interview" ///
>         "referred_excluded_other" 3 "c) Other reasons"

.         
. flowchart writerow(assessment): ///
>         "assessed" 156 "Assessed for Eligibility", ///
>         "assessed_excluded" 54 "Excluded" ///
>         "assessed_excluded_inclusioncritunmet" 22 "a) Inclusion criteria not met" ///
>         "assessed_excluded_exclusioncritmet" 13 "b) Exclusion criteria met" ///
>         "assessed_excluded_unsuitedgroup" 7 "c) Not suited for waitlist group" ///
>         "assessed_excluded_unsuitedtx" 2 "d) Not suited for intervention" ///
>         "assessed_excluded_othertx" 3 "e) Sought other treatment" ///
>         "assessed_excluded_other" 7 "f) Other reasons"

.         
. flowchart_debug, off
|||||| DebugLog Off



. 
. flowchart writerow(random): "randomized" 102 "Randomized", flowchart_blank // Blank Row

. 
. flowchart writerow(allocgroup): ///
>         "alloc_interventiongroup" 51 "Allocated to Intervention group", ///
>         "alloc_waitlistgroup" 51 "Allocated to Wait-list control group"

. flowchart_debug, off    
|||||| DebugLog Off



. flowchart writerow(allocdetails): ///
>         "intervention_received" 49 "Received intervention" ///
>         "intervention_unreceived" 2 "Did not receive intervention" ///
>         "intervention_unreceived_exclusioncrit" 1 "With exclusionary criteria" ///
>         "intervention_unreceived_notime" 1 "Could not find time to participate", ///
>         "waitlist_stayedon" 48 "Stayed on wait-list" ///
>         "waitlist_didnotstay" 3 "Did not stay on wait-list" ///
>         "waitlist_didnotstay_selfinduced" 2 "Lost motivation" ///
>         "waitlist_didnotstay_leftarea" 1 "Was offered treatment elsewhere"

.         
. flowchart writerow(postmeasurement): ///
>         "postintervention_lost" 5 "Post-intervention measurement" ///
>         "postintervention_lost_droppedout" 2 "Dropped out of the intervention" ///
>         "postintervention_lost_nomeasurement" 3 "Did not complete measurement", ///
>         "postwaitlist_lost" 6 "Post-wait-list measurement" ///
>         "postwaitlist_lost_droppedout" 3 "Dropped out of the wait-list" ///
>         "postwaitlist_lost_nomeasurement" 3 "Did not complete measurement" ///
>         

. flowchart writerow(wlistintervention): flowchart_blank, ///     
>         "postwaitlist_intervention_allocated" 48 "Allocated to intervention" ///
>         "postwaitlist_intervention_received" 46 "Received intervention" ///
>         "postwaitlist_intervention_didnotreceive" 2 "Did not receive intervention" ///
>         "postwaitlist_intervention_dnr_lowmotivation" 1 "Reported low motivation" ///
>         "postwaitlist_intervention_dnr_notime" 1 "Could not find time to participate"

.         
. flowchart writerow(measurement3monpostint): ///
>         "intervention_3monthfollowup" 9 "3-months follow-up measurement: \\ \h Loss to follow-up", ///
>         "postwaitlist_postintervention_losstofollowup" 5 "Post-intervention measurement: \\ \h Loss to follow-up" ///
>         "postwaitlist_postintervention_losstofollowup_droppedout" 2 "Dropped out of the intervention" ///
>         "postwaitlist_postintervention_losstofollowup_incomplete" 3 "Did not complete measurement"

. 
. flowchart writerow(wlist3mon): flowchart_blank, ///
>         "postwaitlist_3monthfollowup" 2 "3-months follow-up measurement \\ \h Did not complete measurement"

.         
. flowchart writerow(analyzed): ///
>         "intervention_analyzed" 51 "Analyzed", ///
>         "postwaitlist_analyzed" 51 "Analyzed"

. 
. flowchart connect enrollment_center enrollment_left

. flowchart connect enrollment_center assessment_center

. flowchart connect assessment_center assessment_left

. flowchart connect assessment_center random_center

. flowchart connect random_center allocgroup_center

. flowchart connect random_center allocgroup_left, arrow(angled)

. flowchart connect allocgroup_center allocdetails_center

. flowchart connect allocgroup_left allocdetails_left

. flowchart connect allocdetails_center postmeasurement_center

. flowchart connect allocdetails_left postmeasurement_left

. flowchart connect postmeasurement_center measurement3monpostint_center

. flowchart connect measurement3monpostint_center analyzed_center

. flowchart connect postmeasurement_left wlistintervention_left

. flowchart connect wlistintervention_left measurement3monpostint_left

. flowchart connect measurement3monpostint_left wlist3mon_left

. flowchart connect wlist3mon_left analyzed_left 

. 
. 
. /*
> * DEBUGGING
> * |||||| TEST1: Dummy Row
> flowchart writerow(rownametest1): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST2: Row with No left-block
> flowchart writerow(rownametest2): flowchart_blank, ///
>         "rblock1_line1" 97 "This is one line, of a block." ///
>         "rblock1_line2" 33 "This is another line, of a block" ///
>         "rblock1_line3" 44 "This is another line, of a block"
> 
> * |||||| TEST3: Row with No right-block
> flowchart writerow(rownametest3): "lblock1_line1" 46 "This is one line, \\ of a block." ///
>         "lblock1_line2" 43 "This is another line, of a block" ///
>         "lblock1_line3" 3 "This is another line, of a block", flowchart_blank
> 
> flowchart_debug, on
> * |||||| TEST4: Row with No left-block and a Singleton Lead-Line in the right-block
> flowchart writerow(rownametest4): flowchart_blank, "rblock1_line1" 97 "This is one line, \\ of a block."
>         * To do: Print '\\' at the end of this singleton's line.
>         
> * |||||| TEST5: Row with Singleton Lead-Line in the left-block and No right-block
> flowchart writerow(rownametest5): "lblock1_line1" 46 "This is one line, \\ of a block.", flowchart_blank
>         * To do: Print '& \\' at the end of this singleton's line.
> 
> flowchart_debug, off
> 
> flowchart connect rownametest1_center rownametest1_left
> flowchart connect rownametest1_left rownametest2_left
> flowchart connect rownametest1_center rownametest3_center
> flowchart connect rownametest3_center rownametest5_center
> flowchart connect rownametest2_left rownametest4_left
> */
. 
. 
. flowchart finalize, input("98-IQSCVDMort-PostProduction-Methods--Fig-Flowchart.texdoc") output("..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz")

. texdoc init `"..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz"'
(texdoc output file is ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)

. texdoc local settings_substitutions = `"$Flowchart_Settings"'
(no stlog available; skipping backup)

. 
. texdoc substitute `settings_substitutions'

. 
. texdoc append_snippet 2

. 
. texdoc write    % Outlining the flowchart using the PGF/TikZ matrix function

. 
. texdoc write    \matrix [column sep=5mm,row sep=3mm] {

. 
. forval index=1/`=`.blockfields.list.arrnels'' {
  2.         texdoc write `.blockfields.list[`index']'
  3. }

.         /*
>       % Enrollment - row 1
>       \node [block_center] (referred) {Referred (n=\figvalue{referred})};
>       & \node [block_left] (excluded1) {Excluded (n=\figvalue{referred_excluded}): \\
>         a) Did not wish to participate (n=\figvalue{referred_excluded_nopartic}) \\
>         b) Did not show for interview (n=\figvalue{referred_excluded_noshow}) \\
>         c) Other reasons (n=\figvalue{referred_excluded_other})}; \\
>       % Enrollment - row 2
>       \node [block_center] (assessment) {Assessed for Eligibility (n=\figvalue{assessed})}; 
>       & \node [block_left] (excluded2) {Excluded (n=\figvalue{assessed_excluded}): \\
>         a) Inclusion criteria not met (n=\figvalue{assessed_excluded_inclusioncritunmet}) \\
>         b) Exclusion criteria(s) met (n=\figvalue{assessed_excluded_exclusioncritmet}) \\
>         c) Not suited for group (n=\figvalue{assessed_excluded_unsuitedgroup}) \\
>         d) Not suited for intervention (n=\figvalue{assessed_excluded_unsuitedtx}) \\
>         e) Sought other treatment (n=\figvalue{assessed_excluded_othertx}) \\
>         f) Other reasons (n=\figvalue{assessed_excluded_other})}; \\
>       % Enrollment - row 3
>       \node [block_center] (random) {Randomized (n=\figvalue{randomized})};
>       & \\
>       % Follow-up - row 4
>       \node [block_noborder] (i) {Intervention group}; 
>       & \node [block_noborder] (wlc) {Wait-list control group}; \\
>       % Follow-up - row 5
>       \node [block_assign] (i_T0) {Allocated to intervention (n=\figvalue{alloc_interventiongroup}): \\
>       \h Received intervention (n=\figvalue{intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{intervention_unreceived}, \\
>       \hh \figvalue{intervention_unreceived_exclusioncrit} with exclusionary criteria, \\
>       \hh \figvalue{intervention_unreceived_notime} could not find time to participate)}; 
>           & \node [block_assign] (wlc_T0) {Allocated to wait-list (n=\figvalue{alloc_waitlistgroup}): \\
>       \h Stayed on wait-list (n=\figvalue{waitlist_stayedon}) \\
>       \h Did not stay on wait-list (n=\figvalue{waitlist_didnotstay}, \\
>       \hh \figvalue{waitlist_didnotstay_selfinduced} lost motivation, \\
>       \hh \figvalue{waitlist_didnotstay_leftarea} was offered treatment elsewhere)}; \\
>       % Follow-up - row 6
>       \node [block_lost] (i_T3) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postintervention_lost}, \\
>       \hh \figvalue{postintervention_lost_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postintervention_lost_nomeasurement} did not complete measurement)}; 
>           & \node [block_lost] (wlc_T3) {Post-wait-list measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_lost}, \\
>       \hh \figvalue{postwaitlist_lost_droppedout} dropped out of the wait-list, \\
>       \hh \figvalue{postwaitlist_lost_nomeasurement} did not complete measurement)}; \\
>       % Follow-up - row 7
>       %         Empty first column for intervention group 
>       & \node [block_assign] (wlc_T36) {Allocated to intervention (n=\figvalue{postwaitlist_intervention_allocated}): \\
>       \h Received intervention (n=\figvalue{postwaitlist_intervention_received}) \\
>       \h Did not receive intervention (n=\figvalue{postwaitlist_intervention_didnotreceive}, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_lowmotivation} reported low motivation, \\
>       \hh \figvalue{postwaitlist_intervention_dnr_notime} could not find time to participate)}; \\
>       % Follow-up - row 8
>       \node [block_lost] (i_T6) {3-months follow-up measurement: \\
>       \h Lost to follow-up (n=\figvalue{intervention_3monthfollowup}, \\
>       \hh did not complete measurement)}; 
>       & \node [block_lost] (wlc_T6) {Post-intervention measurement: \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_postintervention_losstofollowup}, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_droppedout} dropped out of the intervention, \\
>       \hh \figvalue{postwaitlist_postintervention_losstofollowup_incomplete} did not complete measurement)}; \\
>       % Follow-up - row 9
>       %         Empty first column for intervention group 
>       & \node [block_lost] (wlc_T9) {3-months follow-up measurement \\
>       \h Lost to follow-up (n=\figvalue{postwaitlist_3monthfollowup}, \\
>       \hh did not complete measurement)}; \\
>       % Analysis - row 10
>       \node [block_assign] (i_ana) {Analysed (n=\figvalue{intervention_analyzed})}; 
>       & \node [block_assign] (wlc_ana) {Analysed (n=\figvalue{postwaitlist_analyzed})}; \\
>         */
.         
. texdoc write    };% End Matrix

. 
. texdoc write    % Connecting nodes with paths

. texdoc write    \begin{scope}[every path/.style=line]

. 
. forval index=1/`=`.pathfields.list.arrnels'' {
  2.         texdoc write `.pathfields.list[`index']'
  3. }

.         /*
>       % Paths for enrollment rows
>       \path (referred)   -- (excluded1);
>       \path (referred)   -- (assessment);
>       \path (assessment) -- (excluded2);
>       \path (assessment) -- (random);
>       \path (random)     -- (i);
>       \path (random)     -| (wlc);
>       % Paths for i-group follow-up rows
>       \path (i)          -- (i_T0);
>       \path (i_T0)       -- (i_T3);
>       \path (i_T3)       -- (i_T6);
>       \path (i_T6)       -- (i_ana);
>       % Paths for wlc-group follow-up rows
>       \path (wlc)        -- (wlc_T0);
>       \path (wlc_T0)     -- (wlc_T3);
>       \path (wlc_T3)     -- (wlc_T36);
>       \path (wlc_T36)    -- (wlc_T6);
>       \path (wlc_T6)     -- (wlc_T9);
>       \path (wlc_T9)     -- (wlc_ana);
>         */
. 
. texdoc write    \end{scope}

. texdoc write \end{tikzpicture}

. 
end of do-file
(texdoc output written to ..\..\Manuscript\04-IQSCVDMort-Methods--Fig-TEST.tikz)
(texdoc not initialized; nothing to do)

. 
end of do-file

